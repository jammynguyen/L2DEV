//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PE.DbEntity.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PEContext : DbContext
    {
        public PEContext()
            : base("name=PEContext")
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<HMIUserConfiguration> HMIUserConfigurations { get; set; }
        public virtual DbSet<HMIWidgetConfiguration> HMIWidgetConfigurations { get; set; }
        public virtual DbSet<PPLSchedule> PPLSchedules { get; set; }
        public virtual DbSet<PRMCustomer> PRMCustomers { get; set; }
        public virtual DbSet<PRMCustomersEXT> PRMCustomersEXTs { get; set; }
        public virtual DbSet<PRMHeatChemAnalysi> PRMHeatChemAnalysis { get; set; }
        public virtual DbSet<PRMHeatsEXT> PRMHeatsEXTs { get; set; }
        public virtual DbSet<PRMHeatSupplier> PRMHeatSuppliers { get; set; }
        public virtual DbSet<PRMMaterialCatalogueEXT> PRMMaterialCatalogueEXTs { get; set; }
        public virtual DbSet<PRMMaterialCatalogueType> PRMMaterialCatalogueTypes { get; set; }
        public virtual DbSet<PRMMaterialsEXT> PRMMaterialsEXTs { get; set; }
        public virtual DbSet<PRMProductCatalogueEXT> PRMProductCatalogueEXTs { get; set; }
        public virtual DbSet<PRMProductCatalogueType> PRMProductCatalogueTypes { get; set; }
        public virtual DbSet<PRMProductsEXT> PRMProductsEXTs { get; set; }
        public virtual DbSet<PRMReheatingGroup> PRMReheatingGroups { get; set; }
        public virtual DbSet<PRMShape> PRMShapes { get; set; }
        public virtual DbSet<PRMSteelgradeChemicalComposition> PRMSteelgradeChemicalCompositions { get; set; }
        public virtual DbSet<PRMSteelgradesEXT> PRMSteelgradesEXTs { get; set; }
        public virtual DbSet<PRMSteelGroup> PRMSteelGroups { get; set; }
        public virtual DbSet<PRMWorkOrdersEXT> PRMWorkOrdersEXTs { get; set; }
        public virtual DbSet<ShiftCalendar> ShiftCalendars { get; set; }
        public virtual DbSet<ShiftDefinition> ShiftDefinitions { get; set; }
        public virtual DbSet<V_NewestAlarmsList> V_NewestAlarmsList { get; set; }
        public virtual DbSet<V_ShiftCalendar> V_ShiftCalendar { get; set; }
        public virtual DbSet<L2L3WorkOrderReport> L2L3WorkOrderReport { get; set; }
        public virtual DbSet<L3L2WorkOrderDefinition> L3L2WorkOrderDefinition { get; set; }
        public virtual DbSet<MVHMeasurementsEXT> MVHMeasurementsEXTs { get; set; }
        public virtual DbSet<MVHRawMaterialsEXT> MVHRawMaterialsEXTs { get; set; }
        public virtual DbSet<MVHRawMaterialsStep> MVHRawMaterialsSteps { get; set; }
        public virtual DbSet<MVHRawMaterialsStepsEXT> MVHRawMaterialsStepsEXTs { get; set; }
        public virtual DbSet<MVHSample> MVHSamples { get; set; }
        public virtual DbSet<MVHSamplesEXT> MVHSamplesEXTs { get; set; }
        public virtual DbSet<HMIRefreshKey> HMIRefreshKeys { get; set; }
        public virtual DbSet<DaysOfYear> DaysOfYears { get; set; }
        public virtual DbSet<PRMSteelgrade> PRMSteelgrades { get; set; }
        public virtual DbSet<DataType> DataTypes { get; set; }
        public virtual DbSet<Property> Properties { get; set; }
        public virtual DbSet<MVHMeasurement> MVHMeasurements { get; set; }
        public virtual DbSet<MVHAssetsEXT> MVHAssetsEXTs { get; set; }
        public virtual DbSet<MVHFeaturesEXT> MVHFeaturesEXTs { get; set; }
        public virtual DbSet<MVHTrigger> MVHTriggers { get; set; }
        public virtual DbSet<MVHTriggersFeature> MVHTriggersFeatures { get; set; }
        public virtual DbSet<V_L3L2TransferTablesSummary> V_L3L2TransferTablesSummary { get; set; }
        public virtual DbSet<V_Events> V_Events { get; set; }
        public virtual DbSet<DLSDelayCatalogueCategory> DLSDelayCatalogueCategories { get; set; }
        public virtual DbSet<MVHDefectCatalogueCategory> MVHDefectCatalogueCategories { get; set; }
        public virtual DbSet<STPTelegramElement> STPTelegramElements { get; set; }
        public virtual DbSet<STPTelegram> STPTelegrams { get; set; }
        public virtual DbSet<STPTelegramStructure> STPTelegramStructures { get; set; }
        public virtual DbSet<STPTelegramValue> STPTelegramValues { get; set; }
        public virtual DbSet<PRMMaterialCatalogue> PRMMaterialCatalogues { get; set; }
        public virtual DbSet<PRMProductCatalogue> PRMProductCatalogues { get; set; }
        public virtual DbSet<V_MaterialsInFurnace> V_MaterialsInFurnace { get; set; }
        public virtual DbSet<DLSDelayCatalogue> DLSDelayCatalogues { get; set; }
        public virtual DbSet<V_L3L1MaterialAssignment> V_L3L1MaterialAssignment { get; set; }
        public virtual DbSet<EventType> EventTypes { get; set; }
        public virtual DbSet<PropertyValue> PropertyValues { get; set; }
        public virtual DbSet<DLSDelay> DLSDelays { get; set; }
        public virtual DbSet<V_Enums> V_Enums { get; set; }
        public virtual DbSet<MVHRawMaterial> MVHRawMaterials { get; set; }
        public virtual DbSet<MVHFeature> MVHFeatures { get; set; }
        public virtual DbSet<MVHAsset> MVHAssets { get; set; }
        public virtual DbSet<V_RawMaterialHistory> V_RawMaterialHistory { get; set; }
        public virtual DbSet<V_RawMaterialList> V_RawMaterialList { get; set; }
        public virtual DbSet<V_RawMaterialMeasurements> V_RawMaterialMeasurements { get; set; }
        public virtual DbSet<PRMProduct> PRMProducts { get; set; }
        public virtual DbSet<V_L1L3MaterialAssignment> V_L1L3MaterialAssignment { get; set; }
        public virtual DbSet<V_MaterialOverview> V_MaterialOverview { get; set; }
        public virtual DbSet<V_RawMaterialOverview> V_RawMaterialOverview { get; set; }
        public virtual DbSet<V_ProductOverview> V_ProductOverview { get; set; }
        public virtual DbSet<V_Assets> V_Assets { get; set; }
        public virtual DbSet<V_FeaturesMap> V_FeaturesMap { get; set; }
        public virtual DbSet<V_Limits> V_Limits { get; set; }
        public virtual DbSet<V_SimAssetSeq> V_SimAssetSeq { get; set; }
        public virtual DbSet<V_TelegramStructures> V_TelegramStructures { get; set; }
        public virtual DbSet<V_TelegramValues> V_TelegramValues { get; set; }
        public virtual DbSet<V_TriggerOverview> V_TriggerOverview { get; set; }
        public virtual DbSet<V_WorkOrderSummary> V_WorkOrderSummary { get; set; }
        public virtual DbSet<V_DelayOverview> V_DelayOverview { get; set; }
        public virtual DbSet<RLSCassette> RLSCassettes { get; set; }
        public virtual DbSet<RLSCassetteType> RLSCassetteTypes { get; set; }
        public virtual DbSet<RLSRollGroovesHistory> RLSRollGroovesHistories { get; set; }
        public virtual DbSet<RLSRoll> RLSRolls { get; set; }
        public virtual DbSet<RLSRollSet> RLSRollSets { get; set; }
        public virtual DbSet<RLSRollType> RLSRollTypes { get; set; }
        public virtual DbSet<RLSStand> RLSStands { get; set; }
        public virtual DbSet<V_CassettesInStands> V_CassettesInStands { get; set; }
        public virtual DbSet<V_CassettesOverview> V_CassettesOverview { get; set; }
        public virtual DbSet<V_RollHistory> V_RollHistory { get; set; }
        public virtual DbSet<V_RollHistoryPerGroove> V_RollHistoryPerGroove { get; set; }
        public virtual DbSet<V_RollSetOverview> V_RollSetOverview { get; set; }
        public virtual DbSet<V_RollsetOverviewNewest> V_RollsetOverviewNewest { get; set; }
        public virtual DbSet<V_RollsWithTypes> V_RollsWithTypes { get; set; }
        public virtual DbSet<Crew> Crews { get; set; }
        public virtual DbSet<RLSGrooveTemplate> RLSGrooveTemplates { get; set; }
        public virtual DbSet<V_RollsetInCassettes> V_RollsetInCassettes { get; set; }
        public virtual DbSet<V_RSCassettesInStands> V_RSCassettesInStands { get; set; }
        public virtual DbSet<V_ActualStandConfiguration> V_ActualStandConfiguration { get; set; }
        public virtual DbSet<V_GroovesView4Accumulation> V_GroovesView4Accumulation { get; set; }
        public virtual DbSet<V_PassChangeDataActual> V_PassChangeDataActual { get; set; }
        public virtual DbSet<V_Products> V_Products { get; set; }
        public virtual DbSet<MNTEquipmentGroup> MNTEquipmentGroups { get; set; }
        public virtual DbSet<MNTEquipment> MNTEquipments { get; set; }
        public virtual DbSet<MNTEquipmentHistory> MNTEquipmentHistories { get; set; }
        public virtual DbSet<V_Measurements> V_Measurements { get; set; }
        public virtual DbSet<MVHQualityControl> MVHQualityControls { get; set; }
        public virtual DbSet<RLSRollSetHistory> RLSRollSetHistories { get; set; }
        public virtual DbSet<MVHDefectCatalogue> MVHDefectCatalogues { get; set; }
        public virtual DbSet<MVHDefect> MVHDefects { get; set; }
        public virtual DbSet<PRMMaterial> PRMMaterials { get; set; }
        public virtual DbSet<PRMWorkOrder> PRMWorkOrders { get; set; }
        public virtual DbSet<V_ProductionHistory> V_ProductionHistory { get; set; }
        public virtual DbSet<V_DefectsSummary> V_DefectsSummary { get; set; }
        public virtual DbSet<PRMHeat> PRMHeats { get; set; }
        public virtual DbSet<V_Heats> V_Heats { get; set; }
        public virtual DbSet<MVHQualityControlCatalogue> MVHQualityControlCatalogues { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int SPAlarmsClear(Nullable<short> dayOffset)
        {
            var dayOffsetParameter = dayOffset.HasValue ?
                new ObjectParameter("DayOffset", dayOffset) :
                new ObjectParameter("DayOffset", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPAlarmsClear", dayOffsetParameter);
        }
    
        public virtual int SPFillShiftCalendar()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPFillShiftCalendar");
        }
    
        public virtual int SPGetAliasValue(string aliasName, string param1, string param2, string param3, ObjectParameter resultSet, ObjectParameter resultValue, ObjectParameter errorText, ObjectParameter errorCode, ObjectParameter nORecords)
        {
            var aliasNameParameter = aliasName != null ?
                new ObjectParameter("AliasName", aliasName) :
                new ObjectParameter("AliasName", typeof(string));
    
            var param1Parameter = param1 != null ?
                new ObjectParameter("Param1", param1) :
                new ObjectParameter("Param1", typeof(string));
    
            var param2Parameter = param2 != null ?
                new ObjectParameter("Param2", param2) :
                new ObjectParameter("Param2", typeof(string));
    
            var param3Parameter = param3 != null ?
                new ObjectParameter("Param3", param3) :
                new ObjectParameter("Param3", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPGetAliasValue", aliasNameParameter, param1Parameter, param2Parameter, param3Parameter, resultSet, resultValue, errorText, errorCode, nORecords);
        }
    
        public virtual int SPGetAliasValue4RawMaterial(string alias, Nullable<long> rawMaterialId, ObjectParameter resultSet, ObjectParameter resultValue, ObjectParameter errorText, ObjectParameter errorCode, ObjectParameter nORecords)
        {
            var aliasParameter = alias != null ?
                new ObjectParameter("Alias", alias) :
                new ObjectParameter("Alias", typeof(string));
    
            var rawMaterialIdParameter = rawMaterialId.HasValue ?
                new ObjectParameter("RawMaterialId", rawMaterialId) :
                new ObjectParameter("RawMaterialId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPGetAliasValue4RawMaterial", aliasParameter, rawMaterialIdParameter, resultSet, resultValue, errorText, errorCode, nORecords);
        }
    
        public virtual int SPLogError(ObjectParameter errorLogID)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPLogError", errorLogID);
        }
    
        public virtual int SPMaterialGenealogy(Nullable<long> rootId, string direction)
        {
            var rootIdParameter = rootId.HasValue ?
                new ObjectParameter("RootId", rootId) :
                new ObjectParameter("RootId", typeof(long));
    
            var directionParameter = direction != null ?
                new ObjectParameter("Direction", direction) :
                new ObjectParameter("Direction", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPMaterialGenealogy", rootIdParameter, directionParameter);
        }
    
        public virtual int SPPrintError()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPPrintError");
        }
    
        public virtual int SPQERatingClear()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPQERatingClear");
        }
    
        public virtual int SPTableKeys(Nullable<int> tableKeyId, ObjectParameter tableName, ObjectParameter tableKey)
        {
            var tableKeyIdParameter = tableKeyId.HasValue ?
                new ObjectParameter("TableKeyId", tableKeyId) :
                new ObjectParameter("TableKeyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPTableKeys", tableKeyIdParameter, tableName, tableKey);
        }
    
        public virtual int SPClearRawMaterials()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SPClearRawMaterials");
        }
    }
}
