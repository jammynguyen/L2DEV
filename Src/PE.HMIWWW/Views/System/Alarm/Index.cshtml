@model PE.HMIWWW.ViewModel.System.VM_AlarmSelection
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script type="text/javascript">
    //THIS METHOD WILL BE CALLED BY SYSTEM (SERVER) IN CASE DATA CHANGE. NAME IS IMPORTANT !!!
    function RefreshData() {
        $("#AlarmGrid").data("kendoGrid").dataSource.read();
        $("#AlarmGrid").data("kendoGrid").refresh();
    }

    function LocalAlarmOnRowDataBound() {
        var gridId = "AlarmGrid";
        try {
            var grid = $("#" + gridId).data("kendoGrid");
            var gridData = grid.dataSource.view();

            for (var i = 0; i < gridData.length; i++) {
                var currentUid = gridData[i].uid;
                var currenRow = grid.table.find("tr[data-uid='" + currentUid + "']");

                if (gridData[i].AlarmTypeId == 2) {

                    currenRow[0].style.backgroundColor = "#ffcd00";
                    currenRow[0].style.color = "#425563";
                }
                if (gridData[i].AlarmTypeId == 3) {
                    currenRow[0].style.backgroundColor = "#ce0037";
                    currenRow[0].style.color = "#ffffff";
                }
            }
        }
        catch (e) {
            ShowPopupMessage("Info", e, null)
        }
    }
</script>

@(Html.Kendo().Grid<PE.HMIWWW.ViewModel.System.VM_AlarmItem>()
                .Name("AlarmGrid")
                .HtmlAttributes(new { style = @String.Format("border:none !important; height:{0}px;", ViewBag.FullGridHeight) })
                .Columns(columns =>
                {
                    columns.Bound(p => p.Id).Visible(false).Filterable(false).Groupable(false);
                    columns.Bound(p => p.AlarmCategoryName).Filterable(true).Width(80);
                    columns.ForeignKey(p => p.AlarmType, (SelectList)ViewBag.AlarmTypes).Filterable(true).Width(90);
                    columns.Bound(p => p.AlarmType).Filterable(true).Width(70).Visible(false);
                    columns.Bound(p => p.AlarmOwner).Filterable(true).Width(100);
                    columns.Bound(p => p.AlarmDate).Width(120).Format(PE.HMIWWW.Core.Resources.ResourceController.GetResourceTextByResourceKey("GLOB_ShortDateTime_FORMAT"));
                    columns.Bound(p => p.ToConfirm).Width(90).Filterable(true).Sortable(true).Groupable(false);
                    columns.Bound(p => p.Message).Width(500).Filterable(true).Sortable(true).Groupable(false);
                    columns.Bound(p => p.Id).Width(30).Sortable(false).Groupable(false).Filterable(false).Title("")
                           .ClientTemplate("# if (ToConfirm == true && (Confirmation == null || Confirmation == false)) {#" +
                           @Html.ImageButton("Confirm", "ConfirmAlarm(#= Id #)", false).ToString() + "# }#" +
                           @Html.ImageButton("details", "DetailsAlarm(#= Id #)", false).ToString());
                })
                .Sortable()
                .Pageable(p => p
                    .Messages(m => m.Display(VM_Resources.GLOB_pagination)))
                .Filterable()
                .Events(events => events.DataBound("LocalAlarmOnRowDataBound"))
                .DataSource(dataSource => dataSource
                        .Ajax()
                        .ServerOperation(true)
                        .Filter(filter =>
                        {
                            if (Model != null)
                            {
                                if (Model.AlarmOwner != null)
                                    filter.Add(f => f.AlarmOwner).IsEqualTo(Model.AlarmOwner);
                                if(Model.ToConfirm!=null)
                                    filter.Add(f => f.ToConfirm).IsEqualTo((bool)Model.ToConfirm);
                            }
                        })
                        .Model(model => model.Id(p => p.Id))
                        .PageSize((int)ViewBag.NoRecordsInGrid)
                        .Read(read => read.Action("GetAlarmData", "Alarm"))
                        .Events(events => events.Error("TelerikErrorHandler"))
                        .Sort(sort => sort.Add(s => s.AlarmDate).Descending())
                        ))

<script>
    function DetailsAlarm(itemId) {
        OpenInPopupWindow({
            controller: 'Alarm',
            method: 'DetailsDialog',
            width: 680,
            data: { id: itemId }
        });
    }
</script>