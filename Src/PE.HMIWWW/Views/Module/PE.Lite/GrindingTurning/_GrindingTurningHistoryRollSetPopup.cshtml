@model PE.HMIWWW.ViewModel.Module.Lite.GrindingTurning.VM_RollSetTurningHistory
@{
    Layout = "~/Views/Shared/_PopupLayout.cshtml";
}

<style>
    .h_dotted_ln {
        border-bottom: 1px dashed black;
        width: 100%;
    }

    .h_dotted_right_ln {
        border-right: 1px dashed black;
    }

    .h_blank_ln {
        width: 100%;
        height: 20px;
    }

    .v_blank_ln {
        width: 20px;
    }

    /*.table-roll-details tr td {
                border: 1px solid black;
        }*/

    .table-roll-details label {
        font-weight: bold;
        font-style: normal;
    }

    .table-roll-details td {
        font-weight: normal;
        font-style: italic;
    }

    .form0 {
        position: absolute;
        left: 10px;
    }
</style>


@if (Model != null && @ViewData.ModelState.IsValid)
{
    <script>
	$(document).ready(function () {
		var rollCnt = @Model.GrooveActualRollUpper.Count() + 3;
		var rowCnt = 15;
		var mainWidth = 545 + (rollCnt - 3) * 85;
		var mainHeight = 650;
		ChangePopupWidth(mainWidth);
		changePopupHeader(mainWidth);
		ChangePopUpContainerDiv();

		if (rollCnt == 3) {
			ChangePopupHeight();
		}

		if (rollCnt > 9) {
			AdjustPopupLeftGreatly();
		} else if (rollCnt > 6 && rollCnt < 10) {
			AdjustPopupLeft();
		} else {
			ResetPopupLeft();
		}
	});
    </script>
}
@{ int rollCnt = Model.GrooveActualRollUpper.Count() + 3;
    int rowCnt = 15;
    int mainWidth = 515 + (rollCnt - 3) * 85;

    int mainHeight = 650;
}


@using (Ajax.BeginForm("ConfigRollSetSubmit", "GrindingTurning", new AjaxOptions { InsertionMode = InsertionMode.Replace, UpdateTargetId = "formContainer" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.RollSetId)
    @Html.HiddenFor(m => m.RollSetName)
    @Html.HiddenFor(m => m.ActualBottomDiameter)
    @Html.HiddenFor(m => m.ActualUpperDiameter)
    @Html.HiddenFor(m => m.ActualUpperRollName)
    @Html.HiddenFor(m => m.ActualBottomRollName)
    @Html.HiddenFor(m => m.ActualUpperRollId)
    @Html.HiddenFor(m => m.ActualBottomRollId)
    int j;
    for (j = 0; j < Model.GrooveActualRollBottom.Count(); j++)
    {
        @Html.HiddenFor(m => m.GrooveActualRollBottom[j].AccBilletCnt);
        @Html.HiddenFor(m => m.GrooveActualRollBottom[j].GrooveTemplateName);
        @Html.HiddenFor(m => m.GrooveActualRollBottom[j].GrooveTemplateId);
        @Html.HiddenFor(m => m.GrooveActualRollBottom[j].GrooveConfirmed);
        @Html.HiddenFor(m => m.GrooveActualRollBottom[j].GrooveShortName);
    }
    for (j = 0; j < Model.GrooveActualRollUpper.Count(); j++)
    {
        @Html.HiddenFor(m => m.GrooveActualRollUpper[j].GrooveTemplateName);
        @Html.HiddenFor(m => m.GrooveActualRollUpper[j].GrooveConfirmed);
        @Html.HiddenFor(m => m.GrooveActualRollUpper[j].GrooveShortName);
    }

    <div id="containerDiv" class="mainContainer" style="width:@(mainWidth);height:@(mainHeight);">
        @* Upper Roll*@
        <table cellspacing="0" cellpadding="0" border="0" class="table-roll-details">
            <tr>
                <td align="left"><label>@(Html.LabelFor(m => m.RollSetName))</label></td>
                <td><div class="v_blank_ln"></div></td>
                <td colspan="@(rollCnt)" align="left">@Html.DisplayFor(m => m.RollSetName)</td>
                <td rowspan="@(rowCnt)"><div class="v_blank_ln"></div></td>
            </tr>
            <tr>
                <td align="left"><label>@*@(Html.LabelFor(m => m.RollSetHistoryName))*@</label></td>
                <td><div class="v_blank_ln"></div></td>
                <td colspan="@rollCnt" align="center">
                    @(Html.Kendo().DropDownList().Name("RollSetHistory").DataTextField("Text").DataValueField("Value").Value(Model.RollSetHistoryId.ToString()).BindTo((SelectList)ViewBag.RSetHistory).HtmlAttributes(new { style = "width: 260px" }).Events(e => e.Select("refreshhistory")))
                </td>
                <td rowspan="@(rowCnt)"><div class="v_blank_ln"></div></td>
            </tr>
            <tr>
                <td colspan="@(rollCnt + 1)"><div class="h_blank_ln"></div></td>
            </tr>
            <tr>
                <td align="left"></td>
                <td><div class="v_blank_ln"></div></td>
                <td align="center"><img src="~/Content/System/img/roll-profille-left.png"></td>

                @{
                    foreach (PE.HMIWWW.ViewModel.Module.VM_GroovesRoll rollUpper in Model.GrooveActualRollUpper.OrderBy(z => z.GrooveNumber))
                    {
                        if (rollUpper.GrooveShortName == "Flat")
                        {
                            <td align="center"><img src="~/Content/System/img/roll-profille-full.png"></td>
                        }
                        else
                        {
                            <td align="center"><img src="~/Content/System/img/roll-profille-rd60.png"></td>
                        }
                    }
                }
                <td align="center"><img src="~/Content/System/img/roll-profille-right.png"></td>
            </tr>
            <tr>
                <td colspan="@(rollCnt + 1)"><div class="h_blank_ln"></div></td>
            </tr>

            <tr>
                <td align="left"><label>@(Html.LabelFor(m => m.GrooveTemplateName))</label></td>
                <td><div class="v_blank_ln"></div></td>
                <td class="h_dotted_right_ln"></td>
                @{foreach (PE.HMIWWW.ViewModel.Module.VM_GroovesRoll rollUpper in Model.GrooveActualRollUpper)
                    {
                        <td align="center" class="h_dotted_right_ln">@Html.DisplayFor(m => rollUpper.GrooveTemplateName)</td>
                    }
                }
                <td></td>
            </tr>

            <tr>
                <td align="left"><label>@(Html.LabelFor(m => m.ActualUpperRollName))</label></td>
                <td><div class="v_blank_ln"></div></td>
                <td colspan="@(rollCnt)" align="center">@Html.DisplayFor(m => m.ActualUpperRollName)</td>
            </tr>

            <tr>
                <td align="left"><label>@(Html.LabelFor(m => m.ActualUpperDiameter))</label></td>
                <td><div class="v_blank_ln"></div></td>
                <td colspan="@(rollCnt)" align="center">@Html.DisplayFor(m => m.ActualUpperDiameter)</td>
            </tr>

            <tr>
                <td align="left"><label>@(Html.LabelFor(m => m.AccWeight))</label></td>
                <td><div class="v_blank_ln"></div></td>
                <td class="h_dotted_right_ln"></td>
                @{foreach (PE.HMIWWW.ViewModel.Module.VM_GroovesRoll rollUpper in Model.GrooveActualRollUpper)
                    {
                        <td align="center" class="h_dotted_right_ln">@Html.DisplayFor(m => rollUpper.AccWeight)</td>
                    }
                }
                <td></td>
            </tr>

            <tr>
                <td align="left"><label>@(Html.LabelFor(m => m.AccBilletCnt))</label></td>
                <td><div class="v_blank_ln"></div></td>
                <td class="h_dotted_right_ln"></td>
                @{foreach (PE.HMIWWW.ViewModel.Module.VM_GroovesRoll rollUpper in Model.GrooveActualRollUpper)
                    {
                        <td align="center" class="h_dotted_right_ln">@Html.DisplayFor(m => rollUpper.AccBilletCnt)</td>
                    }
                }

            </tr>

            <tr>
                <td colspan="@(rollCnt + 1)"><div class="h_blank_ln"></div></td>
            </tr>

            <tr>
                @* Bottom Roll*@
                <td align="left"><label>@(Html.LabelFor(m => m.ActualBottomRollName))</label></td>
                <td><div class="v_blank_ln"></div></td>
                <td colspan="@(rollCnt)" align="center">@Html.DisplayFor(m => m.ActualBottomRollName)</td>
            </tr>
            <tr>
                <td align="left"><label>@(Html.LabelFor(m => m.ActualBottomDiameter))</label></td>
                <td><div class="v_blank_ln"></div></td>
                <td colspan="@(rollCnt)" align="center">@Html.DisplayFor(m => m.ActualBottomDiameter)</td>
            </tr>

            <tr>
                <td align="left"><label>@(Html.LabelFor(m => m.AccWeight))</label></td>
                <td><div class="v_blank_ln"></div></td>
                <td class="h_dotted_right_ln"></td>
                @{foreach (PE.HMIWWW.ViewModel.Module.VM_GroovesRoll rollBottom in Model.GrooveActualRollBottom)
                    {
                        <td align="center" class="h_dotted_right_ln">@Html.DisplayFor(m => rollBottom.AccWeight)</td>
                    }
                }
                <td></td>
            </tr>

            <tr>
                <td align="left"><label>@(Html.LabelFor(m => m.AccBilletCnt))</label></td>
                <td><div class="v_blank_ln"></div></td>
                <td class="h_dotted_right_ln"></td>
                @{foreach (PE.HMIWWW.ViewModel.Module.VM_GroovesRoll rollBottom in Model.GrooveActualRollBottom)
                    {
                        <td align="center" class="h_dotted_right_ln">@Html.DisplayFor(m => rollBottom.AccBilletCnt)</td>
                    }
                }
                <td></td>
            </tr>

        </table>
        <br />
    </div>
}


<script>
    function ChangePopUpContainerDiv() {
        var positionFromLeftPopupContainer = $(".popupContainer")[0].offsetLeft + 10;
        //alert(positionFromLeftPopupContainer);
        $("#containerDiv").css({ left: positionFromLeftPopupContainer, position: 'absolute' });

    }

    function changePopupHeader(mainWidth) {
        $(".header").width(mainWidth);
    }

    function ChangePopupWidth(mainWidth) {
        $(".popup_cont").width(mainWidth);
        $(".container").width(mainWidth);
        $(".popup").width(mainWidth);
        $(".popup_content").width(mainWidth);
        $('#containerDiv').parent().width(mainWidth);
        $('#containerDiv').width(mainWidth);
        $('#formContainer').width(mainWidth);
        var positionFromLeftPopupContainer = $(".popupContainer")[0].offsetLeft + 10;
        //alert(positionFromLeftPopupContainer);
        $("#containerDiv").css({ left: positionFromLeftPopupContainer, position: 'absolute' });
    }

    function ChangePopupHeight() {
        $(".popup_cont").height(700);
        $(".container").height(700);
        $(".popup").height(700);
        $(".popup_content").height(700);
        $('#containerDiv').parent().height(700);
        $('#containerDiv').height(700);
        $('#formContainer').height(700);
        var positionFromLeftPopupContainer = $(".popupContainer")[0].offsetLeft + 10;
        //alert(positionFromLeftPopupContainer);
        $("#containerDiv").css({ left: positionFromLeftPopupContainer, position: 'absolute' });
    }

    function AdjustPopupLeftGreatly() {
        $('.popup_cont').css({ top: 120, left: 300, position: 'absolute' });
    }

    function AdjustPopupLeft() {
        $('.popup_cont').css({ top: 120, left: 300, position: 'absolute' });

    }

    function ResetPopupLeft() {
        $('.popup_cont').css({ top: 120, left: 300, position: 'absolute' });
    }
</script>