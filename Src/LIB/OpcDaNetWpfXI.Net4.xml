<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OpcDaNetWpfXI.Net4</name>
    </assembly>
    <members>
        <member name="T:OPCDA.NET.XmlIO">
            <summary>
            This class contains methods to serialize and de-serialize OPCItemDef arrays.<br/>
            OPCItemDef arrays are used in the AddItems method to add items to an OPC group for read/write operations.
            Instead of creating all the OPCItemDef objects in the program, they can be defined in an XML file. 
            The read method converts the file into an OPCItemDef array that can be directly used in the AddItems 
            method call.
            </summary>
        </member>
        <member name="M:OPCDA.NET.XmlIO.ReadFile(System.String)">
            <summary>
             Reads the specified file and de-serialize it into an OPCItemDef array.<br/>
             Errors throw an exception. The application program needs to catch and handle these exceptions.
            </summary>
            <param name="pathName">Name of the XML file</param>
            <returns>OPCItemDef array with the deserialized data from the XML file.</returns>
        </member>
        <member name="M:OPCDA.NET.XmlIO.ReadBuffer(System.String)">
            <summary>
             De-serializes the text in the specified string into an OPCItemDef array.<br/>
             Errors throw an exception. The application program needs to catch and handle these exceptions.
            </summary>
            <param name="xmltext">String with the XML text.</param>
            <returns>OPCItemDef array with the deserialized data.</returns>
        </member>
        <member name="M:OPCDA.NET.XmlIO.WriteFile(OPCDA.NET.OPCItemDef[],System.String)">
            <summary>
            Serializes the specified OPCItemDef array and writes the XML text into the specified file.<br/>
            Errors throw an exception. The application program needs to catch and handle these exceptions.
            </summary>
            <param name="defs">OPCItemDef array to be serialized</param>
            <param name="pathName">Name of the XML file the serialized data is written to.</param>
        </member>
        <member name="M:OPCDA.NET.XmlIO.WriteBuffer(OPCDA.NET.OPCItemDef[],System.String@)">
            <summary>
            Serializes the specified OPCItemDef array into the specifed string.<br/>
            Errors throw an exception. The application program needs to catch and handle these exceptions.
            </summary>
            <param name="defs">OPCItemDef array to be serialized</param>
            <param name="buffer">The serialized XML text is written into this string.</param>
        </member>
        <member name="T:OPCDA.NET.BrowseTree">
            <summary>
            The methods in this class simplify the browsing of the OPC server's
            address space. The browse result is returned 
            in a TreeNode array that can directly be used with a Windows TreeView control.
            The server's address space organization is read and the browsing done accordingly.
            </summary>
        </member>
        <member name="M:OPCDA.NET.BrowseTree.#ctor(OPCDA.NET.OpcServer)">
            <summary>
            Creates a BrowseTree object that returns the browse result in a WPF TreeViewItem structure that can 
            be directly used with a Windows Forms TreeView control.
            The server's address space organization is read and the browsing done accordingly.
            </summary>
            <param name="srv">IN: Object of the OPC server</param>
        </member>
        <member name="M:OPCDA.NET.BrowseTree.#ctor(OPCDA.NET.OpcServer,System.Windows.Controls.TreeView)">
            <summary>
            This constructor configures the object for browsing the server into a WPF TreeViewItem structure and displaying the 
            browse result in a WPF TreeView control. Branches and items are shown in the same tree.
            In the default BrowseModeOneLevel mode only the root branch is browsed initally. Other branches are browsed 
            when they are the first time selected in the TreeView. 
            The BrowseModeOneLevel property can be set to false before calling the Browse method to force browsing the 
            whole server initally. This is not recommended in typical situations.
            The browse result is shown alphabetically sorted. The DoNotSort property can be set to true before calling the 
            Browse method to disable sorting.
            </summary>
            <param name="srv">IN: Object of the OPC server</param>
            <param name="trview">IN: WPF TreeView control</param>
        </member>
        <member name="M:OPCDA.NET.BrowseTree.buildWPFIcons">
            <summary>
            The images from the Forms image list are converted into a WPF BitmapImage array.
            </summary>
        </member>
        <member name="M:OPCDA.NET.BrowseTree.RefreshSelectedBranch">
            <summary>
            The currently selected branch is refreshed from the server by executing a browse with the current filter.
            </summary>
        </member>
        <member name="M:OPCDA.NET.BrowseTree.CreateTree">
            <summary>
            Browse the server from the root and build a TreeViewItem structure with
            all branches and items.
            </summary>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.BrowseTree.Root">
            <summary>
            Returns the TreeViewItem structure created in the previous CreateTree() call.<br/>
            </summary>
            <returns>TreeViewItem array with all browsed server branches and items</returns>
        </member>
        <member name="M:OPCDA.NET.BrowseTree.isItem(System.Windows.Controls.TreeViewItem)">
            <summary>
            Checks if a node is an item or a branch
            </summary>
            <param name="node">TreeViewItem object of the node.</param>
            <returns>true if the node is an item</returns>
        </member>
        <member name="M:OPCDA.NET.BrowseTree.isBranch(System.Windows.Controls.TreeViewItem)">
            <summary>
            Checks if a node is a branch or an item.
            </summary>
            <param name="node">TreeViewItem object of the node.</param>
            <returns>true if the node is a branch</returns>
        </member>
        <member name="M:OPCDA.NET.BrowseTree.ItemName(System.Windows.Controls.TreeViewItem)">
            <summary>
            Get the full name of the item/branch in the specified branch. 
            This method is typically used to get the name of the node selected in a treeView.
            </summary>
            <param name="node">TreeViewItem object of the node.</param>
            <returns>full item/branch name</returns>
        </member>
        <member name="M:OPCDA.NET.BrowseTree.Browse(System.String,System.Windows.Controls.TreeViewItem[]@)">
            <summary>
            Browse all branches/items from the named branch and build a TreeNode structure.
            </summary>
            <param name="startBranch">IN: name of the branch to be browsed</param>
            <param name="tree">OUT TreeNode structure with all branches and items</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.BrowseTree.Browse(System.Windows.Controls.TreeViewItem[]@)">
            <summary>
            Browse branches/items from the root and build a TreeNode structure.
            </summary>
            <param name="tree">OUT TreeNode structure with all branches and items</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.BrowseTree.Browse(System.Boolean,System.Boolean,System.Windows.Controls.TreeViewItem[]@)">
            <summary>
            Browse the current branch for branches/items and build a TreeNode structure
            The  nodes returned depends on the selection parameters.
            </summary>
            <param name="OneLevelOnly">IN: if true the browse is limited to the current branch.</param>
            <param name="IncludeItems">IN: if true items and branches are returned in the browse result, otherwise only branches.</param>
            <param name="tree">OUT TreeNode structure with all branches and items</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="F:OPCDA.NET.BrowseTree.ImageIndexItem">
            <summary>
            Base Index of the image group the item identification. The item accessRight code is added 
            and the image with this index is displayed.
            </summary>
        </member>
        <member name="F:OPCDA.NET.BrowseTree.ImageIndexBranch">
            <summary>
            Index of the image displayed for branches
            </summary>
        </member>
        <member name="F:OPCDA.NET.BrowseTree.ImageIndexBranchSelected">
            <summary>
            Index of the image displayed for the selected branch
            </summary>
        </member>
        <member name="F:OPCDA.NET.BrowseTree.DoNotSort">
            <summary>
            Branches and items are alphabetically sorted. If TRUE the sorting is diabled 
            and the branches/items are in the order as returned by the server.
            </summary>
        </member>
        <member name="F:OPCDA.NET.BrowseTree.NameFilter">
            <summary>
            Name filter used in the the OPC server browse calls. The default is NULL.
            A different filter string needs to be set before the Browse method is called.
            </summary>
        </member>
        <member name="F:OPCDA.NET.BrowseTree.AccessRightsFilter">
            <summary>
            Filter for read/write access rights.  The value 0 returns all items.
            </summary>
        </member>
        <member name="P:OPCDA.NET.BrowseTree.BrowseModeOneLevel">
            <summary>
            If true the the server browsing is done on demand. Initially only one level is browsed.
            Sub-branches are browsed from the TreeView event handler when a yet unbrowsed branch 
            is selected. If false then the whole server tree structure is browsed and a corresponding 
            TreeNode structure is built. NOTE: With complex servers this may take a long time.
            </summary>
        </member>
        <member name="P:OPCDA.NET.BrowseTree.DataTypeFilter">
            <summary>
            Data type used in the the OPC server browse calls. The default is void (VT_EMPTY).
            A different type needs to be set before the Browse method is called.
            </summary>
        </member>
        <member name="E:OPCDA.NET.BrowseTree.getBrowseFilter">
            <summary>
            This handler is called everytime the OPC server BrowseItemIDs method is called to get the browse filters to be used. 
            </summary>
        </member>
        <member name="E:OPCDA.NET.BrowseTree.reportBrowseError">
            <summary>
            This handler is called in the TreeView mouse event handler when an error happens in the server browse access.
            </summary>
        </member>
        <member name="T:OPCDA.NET.tlNodeInfoWPF">
            <summary>
            WPF TreeViewItem node information for the link from the TreeView branch to the 
            ListView with it's items. A reference to such an object is in the TreeViewItem
            Tag field.
            </summary>
        </member>
        <member name="M:OPCDA.NET.tlNodeInfoWPF.#ctor(System.String,System.Int32)">
            <summary>
            Constuctor. Typically only used OPCDA.NET internally.
            </summary>
            <param name="pName">path name of the branch.</param>
            <param name="len">number of items in the branch</param>
        </member>
        <member name="F:OPCDA.NET.tlNodeInfoWPF.path">
            <summary>
            path name of the owner branch.
            </summary>
        </member>
        <member name="F:OPCDA.NET.tlNodeInfoWPF.itemNames">
            <summary>
            Array of ListViewItem objects with the name of the items in the branch.
            </summary>
        </member>
        <member name="T:OPCDA.NET.BrowseNodeInfoWPF">
            <summary>
            WPF TreeViewItem additional OPC item information
            </summary>
        </member>
        <member name="M:OPCDA.NET.BrowseNodeInfoWPF.#ctor(System.String,System.String)">
            <summary>
            Constructor for branch node. Typically only used OPCDA.NET internally.
            </summary>
            <param name="name">path name of the branch.</param>
            <param name="fqname">path name of the branch.</param>
        </member>
        <member name="M:OPCDA.NET.BrowseNodeInfoWPF.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Constructor for item node. Typically only used OPCDA.NET internally.
            </summary>
            <param name="name">name of the branch.</param>
            <param name="fqname">path name of the branch.</param>
            <param name="accessRights">item accress rights:  0=unknown, 1-In, 2=Out, 3=inOut</param>
        </member>
        <member name="F:OPCDA.NET.BrowseNodeInfoWPF.Name">
            <summary>
            fully qualified item name.
            </summary>
        </member>
        <member name="F:OPCDA.NET.BrowseNodeInfoWPF.path">
            <summary>
            fully qualified item name.
            </summary>
        </member>
        <member name="F:OPCDA.NET.BrowseNodeInfoWPF.isBranch">
            <summary>
            marks the node as a branch
            </summary>
        </member>
        <member name="F:OPCDA.NET.BrowseNodeInfoWPF.itemAccessRights">
            <summary>
            Item accress rights:  0=unknown, 1-In, 2=Out, 3=inOut
            </summary>
        </member>
        <member name="F:OPCDA.NET.BrowseNodeInfoWPF.ImageIndex">
            <summary>
            index in internal icon array
            </summary>
        </member>
        <member name="F:OPCDA.NET.BrowseNodeInfoWPF.SelectedImageIndex">
            <summary>
            index in internal icon array
            </summary>
        </member>
        <member name="T:OPCDA.NET.ShowBrowseTree">
            <summary>
            The OPC server is browsed using the BrowseTree class and the server address space with 
            all branches and items is displayed in a TreeView control or TreeView/ListView controls. 
            </summary>
        </member>
        <member name="M:OPCDA.NET.ShowBrowseTree.#ctor(OPCDA.NET.OpcServer,System.Windows.Controls.TreeView)">
            <summary>
            An object is created for the given OPC server and the WPF TreeView control. 
            No OPC server access is done in this constructor. The Show() method needs to be called to have the 
            server browsed and the result displayed in the specified control.
            </summary>
            <param name="srv">OPC server access object</param>
            <param name="tvTree">TreeView dialog where the browse result is displayed.</param>
        </member>
        <member name="M:OPCDA.NET.ShowBrowseTree.RefreshSelectedBranch">
            <summary>
            The currently selected branch is refreshed from the server by executing a browse with the current filter.
            </summary>
        </member>
        <member name="M:OPCDA.NET.ShowBrowseTree.Show">
            <summary>
            Browses the server and display the branches and items in a TreeView control.
            </summary>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.ShowBrowseTree.Dispose">
            <summary>
            The underlying BrowseTree object is released and the event handler for the associated 
            TreeView dialog is uninstalled.
            </summary>
        </member>
        <member name="M:OPCDA.NET.ShowBrowseTree.isItem(System.Windows.Controls.TreeViewItem)">
            <summary>
            Checks if a node is an item or a branch
            </summary>
            <param name="node"></param>
            <returns>true if the node is an item</returns>
        </member>
        <member name="M:OPCDA.NET.ShowBrowseTree.isBranch(System.Windows.Controls.TreeViewItem)">
            <summary>
            Checks if a node is a branch or an item.
            </summary>
            <param name="node"></param>
            <returns>true if the node is a branch</returns>
        </member>
        <member name="P:OPCDA.NET.ShowBrowseTree.ImageIndexBranchSelected">
            <summary>
            Index of the image displayed for the selected branch
            </summary>
        </member>
        <member name="P:OPCDA.NET.ShowBrowseTree.BrowseModeOneLevel">
            <summary>
            If true the the server browsing is done on demand. Initially only one level is browsed.
            Sub-branches are browsed from the TreeView event handler when a yet unbrowsed branch 
            is selected. If false then the whole server tree structure is browsed and a corresponding 
            TreeNode structure is built. NOTE: With complex servers this may take a long time.
            </summary>
        </member>
        <member name="P:OPCDA.NET.ShowBrowseTree.DoNotSort">
            <summary>
            Branches and items are alphabetically sorted. If TRUE the sorting is diabled 
            and the branches/items are in the order as returned by the server.
            </summary>
        </member>
        <member name="P:OPCDA.NET.ShowBrowseTree.DataTypeFilter">
            <summary>
            Data type used in the the OPC server browse calls. The default is void (VT_EMPTY).
            A different type needs to be set before the Browse method is called.
            </summary>
        </member>
        <member name="P:OPCDA.NET.ShowBrowseTree.NameFilter">
            <summary>
            Name filter used in the the OPC server browse calls. The default is NULL.
            A different filter string needs to be set before the Browse method is called.
            </summary>
        </member>
        <member name="P:OPCDA.NET.ShowBrowseTree.AccessRightsFilter">
            <summary>
            Filter for read/write access rights.  The value 0 returns all items.
            </summary>
        </member>
        <member name="E:OPCDA.NET.ShowBrowseTree.getBrowseFilter">
            <summary>
            This handler is called everytime the OPC server BrowseItemIDs method is called to get the browse filters to be used. 
            </summary>
        </member>
        <member name="E:OPCDA.NET.ShowBrowseTree.reportBrowseError">
            <summary>
            This handler is called in the TreeView mouse event handler when an error happens in the server browse access.
            </summary>
        </member>
        <member name="T:OPCDA.NET.ShowBrowseTreeList">
            <summary>
            The methods in this class simplify the browsing and display of the OPC server's address space. 
            The OPC server is browsed and the branches are displayed in a TreeView control. 
            The items of the selected branch are displayed in a ListView control. 
            Node images are displayed as shown in the picture. The user can select other images or 
            supply his own ImageList. The whole hierarchical tree structure is browsed and displayed. 
            In default mode, the server is browsed as needed, initially the root level and each branch when 
            it is selected for the first time. This results in a short latency, even for servers with a 
            large address space. The BrowseTreeList object's BowseModeOneLevel property can be set to false, 
            to force browsing all levels in the first call. 
            </summary>
        </member>
        <member name="M:OPCDA.NET.ShowBrowseTreeList.#ctor(OPCDA.NET.OpcServer,System.Windows.Controls.TreeView,System.Windows.Controls.ListView)">
            <summary>
            An object is created for the given OPC server and the WPF TreeView / ListView dialog. 
            No OPC server access is done in this constructor. The Show() method needs to be called to have the 
            server browsed and the result displayed in the specified controls.
            </summary>
            <param name="srv">OPC server access object</param>
            <param name="tvBranches">TreeView dialog where the branches are displayed.</param>
            <param name="lvItems">ListView dialog where the items of the selected branch are displayed.</param>
        </member>
        <member name="M:OPCDA.NET.ShowBrowseTreeList.Dispose">
            <summary>
            The underlying BrowseTree object is released and the event handler for the associated 
            TreeView dialog is uninstalled.
            </summary>
        </member>
        <member name="M:OPCDA.NET.ShowBrowseTreeList.Show(System.String)">
            <summary>
            browses the server and displays all branches in the TreeView control 
            and the items of the selected branch in the ListView control.
            </summary>
            <param name="rootName">Name displayed for the root node. often this is the OPC server name.</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.ShowBrowseTreeList.RefreshSelectedBranch">
            <summary>
            The currently selected branch is refreshed from the server by executing a browse with the current filter.
            </summary>
        </member>
        <member name="M:OPCDA.NET.ShowBrowseTreeList.isItem(System.Windows.Controls.TreeViewItem)">
            <summary>
            Checks if a node is an item or a branch
            </summary>
            <param name="node"></param>
            <returns>true if the node is an item</returns>
        </member>
        <member name="M:OPCDA.NET.ShowBrowseTreeList.isBranch(System.Windows.Controls.TreeViewItem)">
            <summary>
            Checks if a node is a branch or an item.
            </summary>
            <param name="node"></param>
            <returns>true if the node is a branch</returns>
        </member>
        <member name="M:OPCDA.NET.ShowBrowseTreeList.ItemName(System.Windows.Controls.TreeViewItem)">
            <summary>
            Get the full name of the item/branch in the specified branch. 
            This method is typically used to get the name of the node selected in a treeView.
            </summary>
            <param name="node">TreeViewItem object of the node.</param>
            <returns>full item/branch name</returns>
        </member>
        <member name="P:OPCDA.NET.ShowBrowseTreeList.BrowseModeOneLevel">
            <summary>
            If true the the server browsing is done on demand. Initially only one level is browsed.
            Sub-branches are browsed from the TreeView event handler when a yet unbrowsed branch 
            is selected. If false then the whole server tree structure is browsed and a corresponding 
            TreeNode structure is built. NOTE: With complex servers this may take a long time.
            </summary>
        </member>
        <member name="P:OPCDA.NET.ShowBrowseTreeList.DoNotSort">
            <summary>
            Branches and items are alphabetically sorted. If TRUE the sorting is diabled 
            and the branches/items are in the order as returned by the server.
            </summary>
        </member>
        <member name="P:OPCDA.NET.ShowBrowseTreeList.DataTypeFilter">
            <summary>
            Data type used in the the OPC server browse calls. The default is void (VT_EMPTY).
            A different type needs to be set before the Browse method is called.
            </summary>
        </member>
        <member name="P:OPCDA.NET.ShowBrowseTreeList.NameFilter">
            <summary>
            Name filter used in the the OPC server browse calls. The default is NULL.
            A different filter string needs to be set before the Browse method is called.
            </summary>
        </member>
        <member name="P:OPCDA.NET.ShowBrowseTreeList.AccessRightsFilter">
            <summary>
            Filter for read/write access rights.  The value 0 returns all items.
            </summary>
        </member>
        <member name="E:OPCDA.NET.ShowBrowseTreeList.getBrowseFilter">
            <summary>
            This handler is called everytime the OPC server BrowseItemIDs method is called to get the browse filters to be used. 
            </summary>
        </member>
        <member name="E:OPCDA.NET.ShowBrowseTreeList.reportBrowseError">
            <summary>
            This handler is called in the TreeView mouse event handler when an error happens in the server browse access.
            </summary>
        </member>
        <member name="T:OPCDA.NET.OnBrowseError">
            <summary>
            The OnBrowseError handler is called when an error happens in the server browse access from the TreeView mouse event handler.
            </summary>
            <param name="ex">null (Nothing) except when an error occured in the handling of the request.</param>
        </member>
        <member name="T:OPCDA.NET.OpcDataBind">
            <summary>
            <b>Class for automatic display and refresh of item values in Windows controls.</b>
            </summary>
        </member>
        <member name="M:OPCDA.NET.OpcDataBind.#ctor(System.Windows.Window,System.String)">
            <summary>
            Create object and connect to the OPC server with the given ProgID.
            For remote OPC servers the name must be specified as //machine/progid.
            If credentials are required then the OPC server must be connected using the 
            OpcServer.Connect() method and the DataBind class then constructed using
            the constructor overload with server object instead of the name. 
            The update rate is initialized to 500 ms.
            </summary>
            <param name="parent">callers WPF System.Windows.Window object or null</param>
            <param name="serverID">OPC server ProgID</param>
        </member>
        <member name="M:OPCDA.NET.OpcDataBind.#ctor(System.Windows.Window,System.String,System.Int32)">
            <summary>
            Create object and connect to the OPC server with the given ProgID.
            For remote OPC servers the name must be specified as //machine/progid.
            If credentials are required then the OPC server must be connected using the 
            OpcServer.Connect() method and the DataBind class then constructed using
            the constructor overload with server object instead of the name.
            </summary>
            <param name="parent">callers WPF System.Windows.Window object or null</param>
            <param name="serverID">OPC server ProgID</param>
            <param name="rate">fastest update rate from the server</param>
        </member>
        <member name="M:OPCDA.NET.OpcDataBind.#ctor(System.Windows.Window,OPCDA.NET.OpcServer,System.Int32)">
            <summary>
            Create object for access to the already connected OPC server using the specified OpcServer object.
            </summary>
            <param name="parent">callers WPF System.Windows.Window object or null</param>
            <param name="srv">OpcServer object of a connected server</param>
            <param name="rate">fastest update rate from the server</param>
        </member>
        <member name="M:OPCDA.NET.OpcDataBind.#ctor(System.Windows.Controls.Page,OPCDA.NET.OpcServer,System.Int32)">
            <summary>
            Create object for access to the already connected OPC server using the specified OpcServer object.
            </summary>
            <param name="parent">callers WPF System.Windows.Controls.Page object or null</param>
            <param name="srv">OpcServer object of a connected server</param>
            <param name="rate">fastest update rate from the server</param>
        </member>
        <member name="M:OPCDA.NET.OpcDataBind.Refresh(OPCDA.OPCDATASOURCE)">
            <summary>
            Force a callback with values of all items.
            </summary>
            <param name="src">Cache or Device</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcDataBind.RefreshCancel">
            <summary>
            Cancel the current Refresh request. The call is ignored if there is no current request.
            </summary>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcDataBind.CheckServer">
            <summary>
            The server connection is checked by making a GetStatus server call.
            </summary>
            <returns>Returns true if the server is connected and successfully returns 'running' state in a GetStatus call.</returns>
        </member>
        <member name="M:OPCDA.NET.OpcDataBind.Dispose">
            <summary>
            Stop and dispose the associated Refresh OPC group.
            The OPC server is NOT disconnected.
            </summary>
        </member>
        <member name="M:OPCDA.NET.OpcDataBind.Disconnect">
            <summary>
            Cleanup and disconnect from OPC server
            </summary>
        </member>
        <member name="M:OPCDA.NET.OpcDataBind.Subscribe(System.String,System.Object)">
            <summary>
            Create a DataBind subscription for one item.
            The item is added to the refresh group and the internal callback handler will write 
            new values to the specified control.
            </summary>
            <param name="itemID">Fully qualified item ID</param>
            <param name="updControl">Windows control object or callback handler</param>
            <returns>Subscription object or null on error</returns>
        </member>
        <member name="M:OPCDA.NET.OpcDataBind.Subscribe(System.String,System.Object,System.Int32)">
            <summary>
            Create a DataBind subscription for one item.
            The item is added to the refresh group and the internal callback handler will write 
            new values to the specified control at the specified index.
            </summary>
            <param name="itemID">Fully qualified item ID</param>
            <param name="updControl">Windows control object or callback handler</param>
            <param name="index">Item index in the Windows control</param>
            <returns>Subscription object or null on error</returns>
        </member>
        <member name="M:OPCDA.NET.OpcDataBind.Subscribe(System.String,System.Object,OPCDA.NET.DataBindFormat)">
            <summary>
            Create a subscription for one item.
            The item is added to the refresh group and the internal callback handler will write 
            new values to the specified control.
            The value is formatted according the format definition object.
            </summary>
            <param name="itemID">Fully qualified item ID</param>
            <param name="updControl">Windows control object or callback handler</param>
            <param name="fmt">Object with format information</param>
            <returns>Subscription object or null on error</returns>
        </member>
        <member name="M:OPCDA.NET.OpcDataBind.Subscribe(System.String,System.Object,System.Int32,OPCDA.NET.DataBindFormat)">
            <summary>
            Create a subscription for one item.
            The item is added to the refresh group and the internal callback handler will write 
            new values to the specified control at the specified index. 
            The value is formatted according the format definition object.
            </summary>
            <param name="itemID">Fully qualified item ID</param>
            <param name="updControl">Windows control object or callback handler</param>
            <param name="index">Item index in the Windows control</param>
            <param name="fmt">Object with format information</param>
            <returns>Subscription object or null on error</returns>
        </member>
        <member name="M:OPCDA.NET.OpcDataBind.Subscribe(System.String,System.Object,System.Int32,System.Int32,OPCDA.NET.DataBindFormat)">
            <summary>
            Create a subscription for one item.
            The item is added to the refresh group and the internal callback handler will write 
            new values to the specified control at the specified index. 
            The value is formatted according the format definition object.
            </summary>
            <param name="itemID">Fully qualified item ID</param>
            <param name="updControl">Windows control object or callback handler</param>
            <param name="index">Item index in the control</param>
            <param name="index2">Additional index for some controls. In a ListView control it defines the column.</param>
            <param name="fmt">Object with format information</param>
            <returns>Subscription object or null on error</returns>
        </member>
        <member name="M:OPCDA.NET.OpcDataBind.Subscribe(System.String,System.Object,System.String,OPCDA.NET.DataBindFormat)">
            <summary>
            Create subscription to the named property in any class.
            </summary>
            <param name="itemID">Fully qualified item ID</param>
            <param name="updControl">Object to be bound to</param>
            <param name="property">Name of the property to be bound to.</param>
            <param name="fmt">Object with format information</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcDataBind.Transform(OPCDA.NET.Subscription,System.Object@)">
            <summary>
            This method is intended for use in DataBind Extension callback handlers.<br/>
            Transform the value if it's a numeric type. The tarnsformation is done with the
            parameters defined int the DataBind Format definition.
            </summary>
            <param name="item">Subscription data for the item.</param>
            <param name="val">Current item value.</param>
        </member>
        <member name="M:OPCDA.NET.OpcDataBind.ValueToString(OPCDA.NET.Subscription,System.Object)">
            <summary>
            This method is intended for use in DataBind Extension callback handlers.<br/>
            Converts the item value object into a string. 
            The optional format specifications and linear transformation are applied.
            </summary>
            <param name="item">Subscription data for the item.</param>
            <param name="val">Current item value.</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcDataBind.ArrayToMultiLineString(OPCDA.NET.Subscription,System.Object)">
            <summary>
            This method is intended for use in DataBind Extension callback handlers.<br/>
            The array type item value is converted into a string with one value per line.
            </summary>
            <param name="item">Subscription data for the item.</param>
            <param name="val">Current array type item value.</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcDataBind.ListToMultiLineString(OPCDA.NET.Subscription,System.Object)">
            <summary>
            This method is intended for use in DataBind Extension callback handlers.<br/>
            The array type item value is converted into a string with one value per line.
            </summary>
            <param name="item">Subscription data for the item.</param>
            <param name="val">Current list type item value.</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcDataBind.ArrayToStringArray(OPCDA.NET.Subscription,System.Object)">
            <summary>
            This method is intended for use in DataBind Extension callback handlers.<br/>
            The array type item value is converted into a string array with a string converted value for each array element.
            </summary>
            <param name="item">Subscription data for the item.</param>
            <param name="val">Current array type item value.</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="P:OPCDA.NET.OpcDataBind.OpcSrv">
            <summary>
            OPC server object for access to lower level OPC server access methods.
            </summary>
        </member>
        <member name="P:OPCDA.NET.OpcDataBind.RefreshGrp">
            <summary>
            Refresh group object allowing access to the underlying RefreshGroup object.
            </summary>
        </member>
        <member name="P:OPCDA.NET.OpcDataBind.UpdateRate">
            <summary>
            Fastest server callback intervall.
            </summary>
        </member>
        <member name="P:OPCDA.NET.OpcDataBind.Active">
            <summary>
            Active state of the OPC group handling the callback.
            Callbacks can be inactivated if e.g. the associated window is not visible.
            When set to true, the OPC server makes a callback for all items. 
            If the state changes to active then the server makes a 
            callback for all defined subsriptions.
            </summary>
        </member>
        <member name="P:OPCDA.NET.OpcDataBind.UserCallbackErrorHandler">
            <summary>
            DEPRECIATED! This handler is called if an exception happens in the DataBind callback handler.
            Use UserCallbackErrorHandler2 instead. It passes the error causing subscription to the user handler for better error diagnostics.
            </summary>
        </member>
        <member name="P:OPCDA.NET.OpcDataBind.UserCallbackErrorHandler2">
            <summary>
            This handler is called if an exception happens in the DataBind callback handler
            Use this handler instead of UserCallbackErrorHandler. It passes the error causing subscription to the user handler for better error diagnostics.
            </summary>
        </member>
        <member name="P:OPCDA.NET.OpcDataBind.UserCallbackHandler">
            <summary>
            This handler is called at the beginning of the handling of server callback with changed values. 
            The handler should return TRUE if the item value has been processed or return FALSE to have 
            the DataBind standard handlers to process the item value.
            </summary>
        </member>
        <member name="T:OPCDA.NET.DataBindCallbackErrorEventHandler">
            <summary>
            Callback handler that can be assigned to a subscription in place of a Windows control.
            The user can handle data change callbacks individually for each item.
            </summary>
        </member>
        <member name="T:OPCDA.NET.DataBindCallbackErrorEventHandler2">
            <summary>
            Callback handler that can be assigned to a subscription in place of a Windows control.
            The user can handle data change callbacks individually for each item.
            </summary>
        </member>
        <member name="T:OPCDA.NET.DataBindCallbackUserHandler">
            <summary>
            DataBind value change callback handler for one item.<br/>
            If such a handler is defined for a subscription then this candler is called from the 
            DataBind server callback handling in place of the default handling.
            The DataBind server callback handler does the Invoke handling for Windows thread synchronization 
            and then calls this handler for each item in the server callback.<br/>
            The handler is true if the item is handled. Otherwise the default DataBind server callback 
            handler will try to handle the callback for this item.
            </summary>
        </member>
        <member name="T:OPCDA.NET.DataBindEventHandler">
            <summary>
            Callback handler that can be assigned to a subscription in place of a Windows control.
            The user can handle data change callbacks individually for each item.
            </summary>
        </member>
        <member name="T:OPCDA.NET.DataBindEventData">
            <summary>
            Data object passed to the user data change event handler.
            </summary>
        </member>
        <member name="F:OPCDA.NET.DataBindEventData.itemInfo">
            <summary>
            The item information is not used in simple applications. It allows access to the 
            lower level item access methods and item identification in case the same handler is
            used for multiple items.
            </summary>
        </member>
        <member name="F:OPCDA.NET.DataBindEventData.val">
            <summary>
            Current item value.
            </summary>
        </member>
        <member name="F:OPCDA.NET.DataBindEventData.quality">
            <summary>
            Current item quality.
            </summary>
        </member>
        <member name="F:OPCDA.NET.DataBindEventData.timestamp">
            <summary>
            Item value timestamp.
            </summary>
        </member>
        <member name="F:OPCDA.NET.DataBindEventData.error">
            <summary>
            HRESULT error status.
            </summary>
        </member>
        <member name="T:OPCDA.NET.DataBindFormat">
            <summary>
            Holds the definitions how to transformn and format a value.
            </summary>
        </member>
        <member name="F:OPCDA.NET.DataBindFormat.reqType">
            <summary>
            Data type of item value requested from the server.
            The default is typeof(void) for the canonical server data type.
            </summary>
        </member>
        <member name="F:OPCDA.NET.DataBindFormat.format">
            <summary>
            Formatting definition string as supported by .Net ToString("xx") for
            numeric and DateTime objects.
            </summary>
        </member>
        <member name="F:OPCDA.NET.DataBindFormat.add">
            <summary>
            linear transformation parameter  ( x + A ) * b
            </summary>
        </member>
        <member name="F:OPCDA.NET.DataBindFormat.multiply">
            <summary>
            linear transformation parameter  ( x + a ) * B
            </summary>
        </member>
        <member name="F:OPCDA.NET.DataBindFormat.showNonGoodQuality">
            <summary>
            If set non-GOOD quality values are shown with the value.
            E.g.  1234.5(uncertain)
            </summary>
        </member>
        <member name="F:OPCDA.NET.DataBindFormat.showNoValueOnBadQuality">
            <summary>
            If set then the item value is not displayed if the quality is in the BAD range.
            The quality is shown if 'showNonGoodQuality' is set, otherwise blank.
            </summary>
        </member>
        <member name="M:OPCDA.NET.DataBindFormat.#ctor">
            <summary>
            Default constructor setting data type void (VT_EMPTY), default formatting and no transformation.
            </summary>
        </member>
        <member name="M:OPCDA.NET.DataBindFormat.#ctor(System.String)">
            <summary>
            Constructor setting the define format string and initializing the other parameters for
            data type void (VT_EMPTY) and no transformation.
            </summary>
            <param name="fmt"></param>
        </member>
        <member name="T:OPCDA.NET.Subscription">
            <summary>
            DataBind Subscription data for one item.
            </summary>
        </member>
        <member name="F:OPCDA.NET.Subscription.parent">
            <summary>
            The OpcDataBind object owning the subscription
            </summary>
        </member>
        <member name="F:OPCDA.NET.Subscription.ItemName">
            <summary>
            OPC Item ID
            </summary>
        </member>
        <member name="F:OPCDA.NET.Subscription.clientHandle">
            <summary>
            OPC clcient handle for the item
            </summary>
        </member>
        <member name="F:OPCDA.NET.Subscription.idef">
            <summary>
            Item definition object of the underlying RefreshGroup
            </summary>
        </member>
        <member name="F:OPCDA.NET.Subscription.control">
            <summary>
            Assigned Windows control
            </summary>
        </member>
        <member name="F:OPCDA.NET.Subscription.controlProperty">
            <summary>
            Optional property name of the control object
            </summary>
        </member>
        <member name="F:OPCDA.NET.Subscription.controlIndex">
            <summary>
            Index in the controlProperty. For certain controls only.
            </summary>
        </member>
        <member name="F:OPCDA.NET.Subscription.controlIndex2">
            <summary>
            Second index in the controlProperty. For certain controls only.
            </summary>
        </member>
        <member name="F:OPCDA.NET.Subscription.format">
            <summary>
            Value formatting definition.
            </summary>
        </member>
        <member name="M:OPCDA.NET.Subscription.Write(System.Object)">
            <summary>
            Write a new item value to the OPC server using synchronous write.
            </summary>
            <param name="val"></param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.Subscription.Read(OPCDA.OPCDATASOURCE,OPCDA.NET.OPCItemState@)">
            <summary>
            Read a new item value from the OPC server using synchronolus read.
            </summary>
            <param name="src">CACHE or DEVICE</param>
            <param name="val">Read value,quality,timestamp and error status</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.Subscription.Remove">
            <summary>
            Cancel the subscription and remove the item from the refresh handling group.
            </summary>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="P:OPCDA.NET.Subscription.Format">
            <summary>
            Optional item value formating and transformation definitions.
            </summary>
        </member>
        <member name="P:OPCDA.NET.Subscription.Value">
            <summary>
            Current item value
            </summary>
        </member>
        <member name="P:OPCDA.NET.Subscription.Quality">
            <summary>
            Current item quality as a string
            </summary>
        </member>
        <member name="P:OPCDA.NET.Subscription.QualityCode">
            <summary>
            Current item quality as an OPC enumeration value
            </summary>
        </member>
        <member name="P:OPCDA.NET.Subscription.Timestamp">
            <summary>
            Current item timestamp
            </summary>
        </member>
        <member name="P:OPCDA.NET.Subscription.Error">
            <summary>
            Curren itme error state
            </summary>
        </member>
        <member name="P:OPCDA.NET.Subscription.ItemInfo">
            <summary>
            Item definition object to allow acces to lower level OPC server access methods.
            </summary>
        </member>
        <member name="T:OPCDA.NET.ItemListLoader">
            <summary>
            This class contains methods to read the ConfigBuilder created XML configuration file into memory. 
            It's available in the OPCDA.NET Professional Edition only.<br/>
            The file can be embedded in the customization DLL or be a separate file.
            </summary>
        </member>
        <member name="M:OPCDA.NET.ItemListLoader.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:OPCDA.NET.ItemListLoader.LoadFromExeDir(System.String)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            Loads the specified XML file from the EXE file directory
            and deserializes into an array structure, which is 
            stored in this object. Access methods return selected information in the 
            proper type for XML-DA server calls.
            </summary>
            <param name="fileName">Path name of the XML file, containing the required item 
            definition lists.</param>
        </member>
        <member name="M:OPCDA.NET.ItemListLoader.LoadEmbedded(System.String)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            Loads an XML file that is embedded in the application EXE and deserializes into an 
            array structure, which is stored in this object. 
            Access methods return selected information in the proper type for XML-DA server calls.
            To embedd the file in the applicationj EXE the XML file need to included in the
            Visual Studio project and the build action for this file has to be set to 'Embedded Resource'.
            </summary>
            <param name="namespaceFileName">Name of the embedded XML file, containing the required item 
            definition lists. Specify the file name exactly as it is shown in the solution 
            File list and precede it with the Namespace of the defining assembly. 
            E.g. NSPlugin.Sample.xml</param>
        </member>
        <member name="M:OPCDA.NET.ItemListLoader.Load(System.String)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            Loads the specified XML file and deserializes into an array structure, which is 
            stored in this object. Access methods return selected information in the 
            proper type for XML-DA server calls.
            </summary>
            <param name="fileName">Path name of the XML file, containing the required item 
            definition lists.</param>
        </member>
        <member name="M:OPCDA.NET.ItemListLoader.Load(System.IO.Stream)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            Loads the XML text from the specified stream and deserializes into an array structure, 
            which is stored in this object. Access methods return selected information in the 
            proper type for XML-DA server calls. This method overload is provided to give the 
            flexibility to read the XML text from anywhre, e.g. a memory buffer. The user has 
            create the Stream appropriate for the source.
            </summary>
            <param name="stream">System.IO.Stream to read the XML text from.</param>
        </member>
        <member name="M:OPCDA.NET.ItemListLoader.HandleListDefaults(OPCDA.NET.ItemLists)">
            <summary>
            Convert the configuration into an item definition array.
            The item parameters are constructed from the item and branch definitions. If a
            parameter is not defined with the item then the branch definition is used.
            </summary>
            <param name="cfgList">List of item configuration definitions</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.ItemListLoader.GetItemList(System.String)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            Returns the items defined in the list with the defined name. 
            The XML file must have previously loaded with one of the LOAD methods.
            </summary>
            <param name="listName">Name of the list to be returned.</param>
            <returns>Returns null (Nothing) if the list name is not found.</returns>
        </member>
        <member name="M:OPCDA.NET.ItemListLoader.GetItemList(System.String,System.Int32)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            Returns the items defined in the list with the defined name. 
            The XML file must have previously loaded with one of the LOAD methods.
            </summary>
            <param name="listName">Name of the list to be returned.</param>
            <param name="clientHandleBase">Client Handle assigned to the first item in the list. 
            Following items have increasing handle values assigned.<br/>
            Note: The client handle is returned in server data change callbacks and is used by the 
            client to associate the values with the items.</param>
            <returns>Array with OPCItemDef objects for the Items in the list. 
            Returns null (Nothing) if the list name is not found.</returns>
        </member>
        <member name="T:OPCDA.NET.BGDataBind">
            <summary>
            The BGDataBind class simplifies refresh handling. 
            It's available in the OPCDA.NET Professional Edition only.<br/>
            DataBind subscriptions can be defined to bind OPC server items to Windows controls.
            Item value changes are written directly to properties of the bound Windows controls or user classes.
            This class executes the Subscribe handling in a background thread to prevent a blocking of the user interface thread.
            The data change callback handling is the same as with the OpcDataBind class.<br/>
            <br/>
            This class does not have a public constructor. Instances are created by calling the BGServer.AddDataBind method.<br/>
            This class can only be used from classes that derive from System.Windows.Forms.Form.
            The completion notification with the browse result is synchronized with the user interface 
            thread by internally calling Form.BeginInvoke().<br/>
            <br/>
            Each server access is timeout checked. On timeout the BGServer GeneralError handler is called to inform 
            the user application. The server access thread may continue to wait for the server call to finish or timeout. 
            Further requests are not being handled before this happens. 
            </summary>
        </member>
        <member name="M:OPCDA.NET.BGDataBind.Dispose">
            <summary>
            The request handling thread is terminated and the associated OpcDataBind object is disposed.
            </summary>
        </member>
        <member name="M:OPCDA.NET.BGDataBind.Subscribe(System.String,System.Object,System.Object,OPCDA.NET.OnBGSubscribe)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            Bind an OPC server item to a simple control that does not need additional parameters.<br/>
            The created Subscription object is returned to the user as an argument of the completion handler. 
            The Subscription object allows the user to access properties of the Subscription and call 
            methods of the underlaying classes. NOTE: It is not recommended to use the methods of the 
            Subscription objects. Such calls is handled in the calling thread and may block the user 
            thread for possibly long timeout intervals.
            </summary>
            <param name="itemID">Fully qualified item ID</param>
            <param name="updControl">Windows control object or callback handler</param>
            <param name="tag">This object is passed to the competion handler and allows the user to pass 
            any information that may be needed in the completion handler. null (nothing) can be specified if 
            the application does not require to pass any information.</param>
            <param name="onCompleted">Competion notification handler.
               void xxx( BGException ex, Subscription odbSubscr, object tag ){}</param>
        </member>
        <member name="M:OPCDA.NET.BGDataBind.Subscribe(System.String,System.Object,System.Int32,System.Object,OPCDA.NET.OnBGSubscribe)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            Bind an OPC server item to an element of a control. The meaning of the index parameter depends on 
            the control. In most cases it's the index of an array element, such as an Item[] element in a ListBox control.<br/>
            The created Subscription object is returned to the user as an argument of the completion handler. 
            The Subscription object allows the user to access properties of the Subscription and call 
            methods of the underlaying classes. NOTE: It is not recommended to use the methods of the 
            Subscription objects. Such calls is handled in the calling thread and may block the user 
            thread for possibly long timeout intervals.
            </summary>
            <param name="itemID">Fully qualified item ID</param>
            <param name="updControl">Windows control object or callback handler</param>
            <param name="index">The meaning of this parameter depends on the control. 
            In most cases it's the index of an array element, such as an Item[] element in a ListBox control.</param>
            <param name="tag">The object is passed to the competion handler and allows the user to pass 
            any information that may be needed in the completion handler. null (nothing) can be specified if 
            the application does not require to pass any information.</param>
            <param name="onCompleted">Competion notification handler.
               void xxx( BGException ex, Subscription odbSubscr, object tag ){}</param>
        </member>
        <member name="M:OPCDA.NET.BGDataBind.Subscribe(System.String,System.Object,OPCDA.NET.DataBindFormat,System.Object,OPCDA.NET.OnBGSubscribe)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            Bind an OPC server item to a simple control that does not need additional parameters.
            The OPC server item value is transformed and formatted according the definitions in the DataBindFormat parameter.<br/>
            The created Subscription object is returned to the user as an argument of the completion handler. 
            The Subscription object allows the user to access properties of the Subscription and call 
            methods of the underlaying classes. NOTE: It is not recommended to use the methods of the 
            Subscription objects. Such calls is handled in the calling thread and may block the user 
            thread for possibly long timeout intervals.
            </summary>
            <param name="itemID">Fully qualified item ID</param>
            <param name="updControl">Windows control object or callback handler</param>
            <param name="fmt">The OPC server item value is transformed and formatted according this definitions.</param>
            <param name="tag">The object is passed to the competion handler and allows the user to pass 
            any information that may be needed in the completion handler. null (nothing) can be specified if 
            the application does not require to pass any information.</param>
            <param name="onCompleted">Competion notification handler.
               void xxx( BGException ex, Subscription odbSubscr, object tag ){}</param>
        </member>
        <member name="M:OPCDA.NET.BGDataBind.Subscribe(System.String,System.Object,System.Int32,OPCDA.NET.DataBindFormat,System.Object,OPCDA.NET.OnBGSubscribe)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            Bind an OPC server item to an element of a control.The meaning of the index parameter depends on 
            the control. In most cases it's the index of an array element, such as an Item[] element in a ListBox control.<br/>
            The created Subscription object is returned to the user as an argument of the completion handler. 
            The Subscription object allows the user to access properties of the Subscription and call 
            methods of the underlaying classes. NOTE: It is not recommended to use the methods of the 
            Subscription objects. Such calls is handled in the calling thread and may block the user 
            thread for possibly long timeout intervals.
            </summary>
            <param name="itemID">Fully qualified item ID</param>
            <param name="updControl">Windows control object or callback handler</param>
            <param name="index">The meaning of this parameter depends on the control. 
            In most cases it's the index of an array element, such as an Item[] element in a ListBox control.</param>
            <param name="fmt">The OPC server item value is transformed and formatted according this definitions.</param>
            <param name="tag">The object is passed to the competion handler and allows the user to pass 
            any information that may be needed in the completion handler. null (nothing) can be specified if 
            the application does not require to pass any information.</param>
            <param name="onCompleted">Competion notification handler.
               void xxx( BGException ex, Subscription odbSubscr, object tag ){}</param>
        </member>
        <member name="M:OPCDA.NET.BGDataBind.Subscribe(System.String,System.Object,System.Int32,System.Int32,OPCDA.NET.DataBindFormat,System.Object,OPCDA.NET.OnBGSubscribe)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            Bind an OPC server item to an element of a control.The meaning of the index parameter depends on 
            the control. In most cases it's the index of an array element, such as an Item[] element in a ListBox control.<br/>
            The created Subscription object is returned to the user as an argument of the completion handler. 
            The Subscription object allows the user to access properties of the Subscription and call 
            methods of the underlaying classes. NOTE: It is not recommended to use the methods of the 
            Subscription objects. Such calls is handled in the calling thread and may block the user 
            thread for possibly long timeout intervals.
            </summary>
            <param name="itemID">Fully qualified item ID</param>
            <param name="updControl">Windows control object or callback handler</param>
            <param name="index">The meaning of this parameter depends on the control. 
            In most cases it's the index of an array element, such as an Item[] element in a ListBox control.</param>
            <param name="index2">Additional index for more complex controls.
            In a ListView control it defines the column.</param>
            <param name="fmt">The OPC server item value is transformed and formatted according this definitions.</param>
            <param name="tag">The object is passed to the competion handler and allows the user to pass 
            any information that may be needed in the completion handler. null (nothing) can be specified if 
            the application does not require to pass any information.</param>
            <param name="onCompleted">Competion notification handler.
               void xxx( BGException ex, Subscription odbSubscr, object tag ){}</param>
        </member>
        <member name="M:OPCDA.NET.BGDataBind.Subscribe(System.String,System.Object,System.String,OPCDA.NET.DataBindFormat,System.Object,OPCDA.NET.OnBGSubscribe)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            Create subscription to the named property in any class.<br/>
            The created Subscription object is returned to the user as an argument of the completion handler. 
            The Subscription object allows the user to access properties of the Subscription and call 
            methods of the underlaying classes. NOTE: It is not recommended to use the methods of the 
            Subscription objects. Such calls is handled in the calling thread and may block the user 
            thread for possibly long timeout intervals.
            </summary>
            <param name="itemID">Fully qualified item ID</param>
            <param name="updControl">Windows control object or callback handler</param>
            <param name="property">Name of the property to be bound.</param>
            <param name="fmt">The OPC server item value is transformed and formatted according this definitions.</param>
            <param name="tag">The object is passed to the competion handler and allows the user to pass 
            any information that may be needed in the completion handler. null (nothing) can be specified if 
            the application does not require to pass any information.</param>
            <param name="onCompleted">Competion notification handler.
               void xxx( BGException ex, Subscription odbSubscr, object tag ){}</param>
        </member>
        <member name="P:OPCDA.NET.BGDataBind.Active">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            Active state of the DataBind object. The DataBind active state controls all defined subscription. 
            Data change callbacks and control updates happen only in active state.
            The DataBind object can be inactivated if e.g. the associated window is not visible.<br/>
            A get is from the 'Active' property of the underlying OpcdataBind object. 
            On set the associated OPC server group is modified. If the state changes to active then the server makes a 
            callback for all defined subscriptions.
            </summary>
        </member>
        <member name="T:OPC.OpcServerBrowser">
            <summary>
            This class provides the interface to the OpcEnum browser for local or remote OPC servers.
            </summary>
        </member>
        <member name="M:OPC.OpcServerBrowser.#ctor">
            <summary>
            Creates an OpcServerBrowser object with an instance of the OpcEnum server browser on the local machine.
            </summary>
        </member>
        <member name="M:OPC.OpcServerBrowser.#ctor(System.String)">
            <summary>
            Creates an OpcServerBrowser object with an instance of the OpcEnum server browser 
            on the specified machine.
            </summary>
            <param name="ComputerName">Network name of the computer to be browsed.</param>
        </member>
        <member name="M:OPC.OpcServerBrowser.#ctor(OPC.Common.Host)">
            <summary>
            Creates an OpcServerBrowser object with an instance of the OpcEnum server browser 
            on the machine specified in the Host object. The server is launched with the credentials
            defined int the Host object.
            </summary>
            <param name="host">Object with the machine name and the access credentials.</param>
        </member>
        <member name="M:OPC.OpcServerBrowser.GetServerList(System.String[]@)">
            <summary>
            Get the names of the registerd OPC DA V1, V2, V3 servers. 
            The ProgId of all OPCDA servers is returned as a string array.<br/>
            This array can e.g. be directly displayed in a Windows control.<br/>
            The Xi or UA enhanced OPCDA.NET version also includes Xi/UA servers. 
            Enumerating Xi/UA servers requires a Xi/UA discovery server to be currently running locally or on the LAN.
            Only the Xi/UA server discovered on the local or the specified machine are included in the result.
            </summary>
            <param name="Servers">OUT: Array with ProgIds of the enumerated servers</param>
        </member>
        <member name="M:OPC.OpcServerBrowser.GetServerList(System.String[]@,System.Guid[]@)">
            <summary>
            Get the names and CLSIDs of the registerd OPC DA V1, V2, V3 servers.<br/>
            The ProgId of all OPCDA servers is returned as a string array.<br/>
            This array can e.g. be directly displayed in a Windows control.
            </summary>
            <param name="Servers">OUT: Array with ProgIds of the enumerated OPC DA servers</param>
            <param name="ClsIDs">OUT: Array with CLSIDs of the enumerated OPC DA servers</param>
        </member>
        <member name="M:OPC.OpcServerBrowser.GetServerList(System.Boolean,System.Boolean,System.String[]@)">
            <summary>
            Browse V2 and/or V3 servers depending on the selection.<br/>
            The Xi or UA enhanced OPCDA.NET version also includes UA servers. 
            Enumerating Xi/UA servers requires an Xi/UA discovery server to be currently running locally or on the LAN.
            Only the Xi/UA server discovered on the local or the specified machine are included in the result.
            </summary>
            <param name="V2">return V2 servers</param>
            <param name="V3">return V3 servers</param>
            <param name="Servers">OUT: Array with CLSIDs of the enumerated OPC DA servers</param>
        </member>
        <member name="M:OPC.OpcServerBrowser.GetServerList(System.Guid[],System.String[]@)">
            <summary>
            Get the names of the OPC servers registered with one of the categories
            listed in the CategoriesList parameter.<br/>
            The ProgId of all servers is returned as a string array.<br/>
            This array can e.g. be directly displayed in a Windos control.<br/>
            </summary>
            <param name="catList">IN: Array with the Guid of each category to include.</param>
            <param name="Servers">OUT:  ProgId of the enumerated OPC servers</param>
        </member>
        <member name="M:OPC.OpcServerBrowser.GetServerList(System.Guid[],System.String[]@,System.Guid[]@)">
            <summary>
            Get the names and CLSIDs of the OPC servers registered with one of the categories
            listed in the CategoriesList parameter.<br/>
            </summary>
            <param name="catList">IN: Array with the Guid of each category to include.</param>
            <param name="Servers">OUT:  ProgId of the enumerated OPC DA V2 servers</param>
            <param name="ClsIDs">OUT:  CLSID of the enumerated OPC DA V2 servers</param>
        </member>
        <member name="M:OPC.OpcServerBrowser.EnumClassesOfCategories(System.Int32,System.Guid[],System.Int32,System.Guid[],System.Object@)">
            <summary>
            Enumerate the registered OPC servers.<br/>
            See OPC specs, chapter 'OPC Server Browser' for details
            </summary>
            <param name="catListLength"></param>
            <param name="catList"></param>
            <param name="reqListLenght"></param>
            <param name="reqList"></param>
            <param name="enumtemp"></param>
            <returns></returns>
        </member>
        <member name="M:OPC.OpcServerBrowser.GetClassDetails(System.Guid@,System.String@,System.String@)">
            <summary>
            Get the ProgId and user type or the server with the specified CLSID.
            See OPC specs, chapter 'OPC Server Browser' for details
            </summary>
            <param name="clsid">IN: CLSID of the OPC Server</param>
            <param name="progID">OUT: ProgId name of the server</param>
            <param name="userType">OUT: User type information</param>
            <returns></returns>
        </member>
        <member name="M:OPC.OpcServerBrowser.CLSIDFromProgID(System.String,System.Guid@)">
            <summary>
            Get a server's CLSID from it's ProgId.<br/>
            See OPC specs, chapter 'OPC Server Browser' for details<br/>
            </summary>
            <param name="progId">IN: ProdId name of the OPC server</param>
            <param name="clsid">OUT: CLSID of the server</param>
            <returns></returns>
        </member>
        <member name="T:OPCDA.NET.BGCore">
            <summary>
            This class provides an interface to the OPC Core Components server enumerator (OpcEnum.exe).
            It's available in the OPCDA.NET Professional Edition only.<br/>
            OPC servers can be browsed on the local machine as well as networked machines.
            The browse requests are queued and handled in a background thread in order to prevent the 
            application being blocked and unresponsive due to long execution times or long timeouts 
            in case of COM or network issues.<br/>
            This class can only be used from classes that derive from System.Windows.Forms.Form.
            The completion notification with the browse result is synchronized with the user interface 
            thread by internally calling Form.BeginInvoke() 
            </summary>
        </member>
        <member name="M:OPCDA.NET.BGCore.#ctor(System.Windows.Window)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            An instance is created into inactive state. The WPF Window class argument is used in the request completion 
            handlers to call Window.Dispatcher.BeginInvoke in order to synchronize the completion handler with the 
            user interface thread.
            </summary>
            <param name="owner">The completion handlers call Window.Dispatcher.BeginInvoke for this object.</param>
        </member>
        <member name="M:OPCDA.NET.BGCore.Dispose">
            <summary>
            The request handling thread is terminated. 
            This method must be called for the application to terminate properly.
            </summary>
        </member>
        <member name="M:OPCDA.NET.BGCore.BrowseDA2Servers(OPC.Common.Host,System.Object,OPCDA.NET.OnBGBrowseServers)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            The OPC DA V2 servers installed on the specifiecd machine are returned as a string array 
            argument of the completion handler.
            </summary>
            <param name="machine">Specifies the machine to be browsed. Optionally access credentials may be defined.
            Specifiy null (Nothing) for the local machine. The network machine names without credentials can be passed as:<br/>
            C# : new OPC.Common.Host( "xyz" );<br/>
            VB : New OPC.Common.Host("xyz") </param>
            <param name="tag">This object is passed to the competion handler and allows the user to pass 
            any information that may be needed in the completion handler. null (nothing) can be specified if 
            the application does not require to pass any information.</param>
            <param name="onCompleted">Competion notification handler.
                void xxx( BGException ex, string machine, string[] servers, object tag ){}</param>
        </member>
        <member name="M:OPCDA.NET.BGCore.BrowseDA23Servers(OPC.Common.Host,System.Object,OPCDA.NET.OnBGBrowseServers)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            The OPC DA V2 and OPC DA V3 servers installed on the specifiecd machine are returned as a string array 
            argument of the completion handler.
            </summary>
            <param name="machine">Specifies the machine to be browsed. Optionally access credentials may be defined.
            Specifiy null (Nothing) for the local machine. The network machine names without credentials can be passed as:<br/>
            C# : new OPC.Common.Host( "xyz" );<br/>
            VB : New OPC.Common.Host("xyz") </param>
            <param name="tag">This object is passed to the competion handler and allows the user to pass 
            any information that may be needed in the completion handler. null (nothing) can be specified if 
            the application does not require to pass any information.</param>
            <param name="onCompleted">Competion notification handler.
               void xxx( BGException ex, string machine, string[] servers, object tag ){}</param>
        </member>
        <member name="M:OPCDA.NET.BGCore.BrowseServers(OPC.Common.Host,OPCDA.NET.OPCServerTypes,System.Object,OPCDA.NET.OnBGBrowseServers)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            The specified types of OPC servers installed on the specifiecd machine are returned as a string array 
            argument of the completion handler.
            </summary>
            <param name="machine">Specifies the machine to be browsed. Optionally access credentials may be defined.
            Specifiy null (Nothing) for the local machine. The network machine names without credentials can be passed as:<br/>
            C# : new OPC.Common.Host( "xyz" );<br/>
            VB : New OPC.Common.Host("xyz") </param>
            <param name="types">OPCServerTypes enumerator values to specify the type of OPC servers to be browsed. 
            Multiple enumerator values can be 'ored' to specify multiple types of OPC servers.</param>
            <param name="tag">This object is passed to the competion handler and allows the user to pass 
            any information that may be needed in the completion handler. null (nothing) can be specified if 
            the application does not require to pass any information.</param>
            <param name="onCompleted">Competion notification handler.
               void xxx( BGException ex, string machine, string[] servers, object tag ){}</param>
        </member>
        <member name="M:OPCDA.NET.BGCore.RevertToSelf">
            <summary>
            Win32 security handling method.
            </summary>
            <returns></returns>
        </member>
        <member name="E:OPCDA.NET.BGCore.GeneralError">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            This event handler is called when an error occurs and the user did not specify a completion 
            handler in the request. It is also called when a request handling timeout occurs. In this case it's
            called even with a user completion handler specified. The request completion handler will be called 
            when the request handling finally terminates. This may be after a much longer time limit.
            </summary>
        </member>
        <member name="P:OPCDA.NET.BGCore.ServerResponseLimit">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            This is the time limit in milliseconds for the OPC server call handling. The default is 10 seconds.<br/>
            If the server call does not return within this time limit then the GeneralError handling method is 
            called with a TIMEOUT error indication.<br/>
            The server access thread may continue to wait for the server call to finish or timeout. Further requests 
            are not being handled before this happens. 
            </summary>
        </member>
        <member name="T:OPCDA.NET.OPCServerTypes">
            <summary>
            This enumerator defines masks that specify the type of OPC server to be included in the browse result. 
            Multiple values can be 'ored' to specify multiple types of OPC servers. 
            </summary>
        </member>
        <member name="F:OPCDA.NET.OPCServerTypes.DA1">
            <summary>
            OPC DA V1
            </summary>
        </member>
        <member name="F:OPCDA.NET.OPCServerTypes.DA2">
            <summary>
            OPC DA V2
            </summary>
        </member>
        <member name="F:OPCDA.NET.OPCServerTypes.DA3">
            <summary>
            OPC DA V3
            </summary>
        </member>
        <member name="F:OPCDA.NET.OPCServerTypes.AE1">
            <summary>
            OPC AE V1
            </summary>
        </member>
        <member name="F:OPCDA.NET.OPCServerTypes.HDA1">
            <summary>
            OPC HDA V1
            </summary>
        </member>
        <member name="T:OPCDA.NET.BGBrowseTree">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            The server is browsed from a backgound thread and the browse result is returned in a TreeNode structure.
            A TreeView object can be passed to have this class directly display the browse result. In the default
            BrowseModeOneLevel mode only the root branch is browsed initally. Other branches are browsed when they are the first 
            time selected in the TreeView.<br/>
            If also a ListView object is defined then the item of the selected branch are shown in the ListView controls.
            In the TreeView controls are only the branches shown in this case.<br/>
            <br/>
            The TreeNode Tag property is filled with a BrowseNodeInfo object that contains the information about the branch
            or item. For item nodes the BrowseElement object is filled with the item information. This includes the values of 
            the properties defined to be read in the browse process.<br/>
            In the ListView browse mode the TreeNode structure contains only branches. In this case the BrowseNodeInfo object
            has a BrowseElement object for each item browsed in this branch.<br/>
            <br/>
            If the items are displayed in a ListView control then the Tag property of each ListViewItem is filled with a 
            BrowseElement object the contains the information about the item.<br/>
            <br/>
            This class can only be used from classes that derive from System.Windows.Window.
            </summary>
        </member>
        <member name="M:OPCDA.NET.BGBrowseTree.#ctor(OPCDA.NET.BGServer)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            This constructor configures the object for browsing the server into a WPF TreeViewItem structure without displaying the 
            browse result in a control. The whole server is browsed. For some servers this may take a long time.
            </summary>
            <param name="srv">BGServer object for the server access and the general error reporting.</param>
        </member>
        <member name="M:OPCDA.NET.BGBrowseTree.#ctor(OPCDA.NET.BGServer,System.Windows.Controls.TreeView)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            This constructor configures the object for browsing the server into a WPF TreeeViewItem structure and displaying the 
            browse result in a WPF TreeView control. Branches and items are shown in the same tree.
            In the default BrowseModeOneLevel mode only the root branch is browsed initally. Other branches are browsed 
            when they are the first time selected in the TreeView. 
            The BrowseModeOneLevel property can be set to false before calling the Browse method to force browsing the 
            whole server initally. This is not recommended in typical situations.
            The browse result is shown alphabetically sorted. The DoNotSort property can be set to true before calling the 
            Browse method to disable sorting.
            </summary>
            <param name="srv">BGServer object for the server access and the general error reporting.</param>
            <param name="tv">WPF TreeView control to display the branches and items.</param>
        </member>
        <member name="M:OPCDA.NET.BGBrowseTree.#ctor(OPCDA.NET.BGServer,System.Windows.Controls.TreeView,System.Windows.Controls.ListView)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            This constructor configures the object for browsing the server into a WPF TreeViewItem structure and displaying the 
            browse result in a TreeView and a ListView control. Branches are shown in the WPF TreeView control and the items
            of the selected branch are displayed in the ListView control.
            In the default BrowseModeOneLevel mode only the root branch is browsed initally. Other branches are browsed 
            when they are the first time selected in the TreeView. 
            The BrowseModeOneLevel property can be set to false before calling the Browse method to force browsing the 
            whole server initally. This is not recommended in typical situations.
            The browse result is shown alphabetically sorted. The DoNotSort property can be set to true before calling the 
            Browse method to disable sorting.
            </summary>
            <param name="srv">BGServer object for the server access and the general error reporting.</param>
            <param name="tv">WPF TreeView control to display the branches.</param>
            <param name="lv">WPF ListView control to disply the items of the branch selected in the TreeView control.</param>
        </member>
        <member name="M:OPCDA.NET.BGBrowseTree.Dispose">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            Dispose needs to be called to remove the object from the TreeView control.
            The MouseDown and AfterSelect TreeView control event handlers are uninstalled.
            </summary>
        </member>
        <member name="M:OPCDA.NET.BGBrowseTree.Browse(System.Windows.Controls.TreeViewItem)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            The server is browsed according the current state of the properties of this object and the handling depends on 
            the constructor overload used to create the object.
            The browse result is filtered according the state of the filter properties. The FilterName property is applied for
            branches and items. The FilterAccressRights and FilterDatatype proeprties only for items.
            </summary>
            <param name="root">The browse result is added to this WPF TreeNode object. The Text property of this TreeNode 
            object is displayed as the root node in the TreeView control, if this BGBrowse object has TreeView control assigned.
            The text is usually the name of the browsed OPC server.</param>
        </member>
        <member name="M:OPCDA.NET.BGBrowseTree.buildWPFIcons">
            <summary>
            The images from the Forms image list are converted into a WPF BitmapImage array.
            </summary>
        </member>
        <member name="M:OPCDA.NET.BGBrowseTree.RefreshSelectedBranch">
            <summary>
            The currently selected branch is refreshed from the server by executing a browse with the current filter.
            </summary>
        </member>
        <member name="M:OPCDA.NET.BGBrowseTree.isItem(System.Windows.Controls.TreeViewItem)">
            <summary>
            Checks if a node is an item. The node may also be a branch in OPC DA V3 servers.
            </summary>
            <param name="node">TreeNode object of the node.</param>
            <returns>true if the node is an item</returns>
        </member>
        <member name="M:OPCDA.NET.BGBrowseTree.isBranch(System.Windows.Controls.TreeViewItem)">
            <summary>
            Checks if a node is a branch.  The node may also be a item in OPC DA V3 servers.
            </summary>
            <param name="node">TreeNode object of the node.</param>
            <returns>true if the node is a branch</returns>
        </member>
        <member name="F:OPCDA.NET.BGBrowseTree.ImageIndexItem">
            <summary>
            Base Index of the image group the item identification. The item accessRight code is added 
            and the image with this index is displayed.
            </summary>
        </member>
        <member name="F:OPCDA.NET.BGBrowseTree.ImageIndexBranch">
            <summary>
            Index of the image displayed for branches
            </summary>
        </member>
        <member name="F:OPCDA.NET.BGBrowseTree.ImageIndexBranchSelected">
            <summary>
            Index of the image displayed for the selected branch
            </summary>
        </member>
        <member name="P:OPCDA.NET.BGBrowseTree.BrowseModeOneLevel">
            <summary>
            If true the the server browsing is done on demand. Initially only the root level is browsed.
            Sub-branches are browsed from the TreeView event handler when a yet unbrowsed branch 
            is selected. If false then the whole server tree structure is browsed and a corresponding 
            TreeNode structure is built. NOTE: With complex servers this may take a long time.
            </summary>
        </member>
        <member name="P:OPCDA.NET.BGBrowseTree.DoNotSort">
            <summary>
            Branches and items are alphabetically sorted. If TRUE the sorting is diabled 
            and the branches/items are displayed in the order as returned by the server.
            </summary>
        </member>
        <member name="P:OPCDA.NET.BGBrowseTree.PropertyIDsToGet">
            <summary>
            IDs of the item properties to read with the browse.
            By default the properties 1 (Canonical Datatype) and 5 (Item access rights) are defined.
            The access right property value is used for the image selection in the TreeView control.
            Property 5 should always be part of a user defined set of properties.
            </summary>
        </member>
        <member name="P:OPCDA.NET.BGBrowseTree.FilterName">
            <summary>
            Item name browse filter. An empty string (the default) or "*" matches all names.
            </summary>
        </member>
        <member name="P:OPCDA.NET.BGBrowseTree.FilterAccessRights">
            <summary>
            Access rights browse filter. 
            The default UNKNOWN (0) and READWRITE (3) matches all items. 
            READ (1) matches all items that are readable. 
            WRITE (2) matches all items that are writable. 
            </summary>
        </member>
        <member name="P:OPCDA.NET.BGBrowseTree.FilterDatatype">
            <summary>
            Item canonical data type filter.
            The default is to include all items. This is specified as:
            C# :  typeof(void)
            VB :  Type.GetType("System.Void")
            If another type is defined then only items with this canonical data type are included in the browse result.
            </summary>
        </member>
        <member name="E:OPCDA.NET.BGBrowseTree.getBrowseFilter">
            <summary>
            This handler is called everytime the OPC server BrowseItemIDs method is called to get the browse filters to be used. 
            </summary>
        </member>
        <member name="T:OPCDA.NET.OnBGGeneralError">
            <summary>
            The BGGeneralError handler is called when an error happens and the user did not pass a specific 
            completion notification handler.
            </summary>
            <param name="info">Text that explains where the error happened.</param>
            <param name="ex">null (Nothing) except when an error occured in the handling of the request.</param>
            <param name="tag">null (Nothing) or an object passed from the request call. 
            The application can pass an object with any kind of information from the request module to the completion handler. </param>
        </member>
        <member name="T:OPCDA.NET.OnBGGeneralErrorExt">
            <summary>
            The BGGeneralError handler is called when an error happens and the user did not pass a specific 
            completion notification handler.
            </summary>
            <param name="sender">BGServer object reporting the event.</param>
            <param name="info">Text that explains where the error happened.</param>
            <param name="ex">null (Nothing) except when an error occured in the handling of the request.</param>
            <param name="tag">null (Nothing) or an object passed from the request call. 
            The application can pass an object with any kind of information from the request module to the completion handler. </param>
        </member>
        <member name="T:OPCDA.NET.OnBGBrowseServers">
            <summary>
            BGCore.BrowseServers completion notification.
            </summary>
            <param name="ex">null (Nothing) except when an error occured in the handling of the request.
            On error the other paramters are invalid, except for the tag parameter.</param>
            <param name="machine">Network name of the computer where the OPC servers where browsed. An empty string indicates the local machine.</param>
            <param name="servers">List with the ProgID names of the browsed OPC servers.</param>
            <param name="tag">null (Nothing) or an object passed from the request call. 
            The application can pass an object with any kind of information from the request module to the completion handler.
               xxx( BGException ex, string machine, string[] servers, object tag ){}</param>
        </member>
        <member name="T:OPCDA.NET.OnBGSrvConnected">
            <summary>
            BGServer.Connect completion notification.
            On successful competion the OPC server is connected and accessible through the BGServer object.
            </summary>
            <param name="ex">null (Nothing) except when an error occured in the handling of the request.</param>
            <param name="tag">null (Nothing) or an object passed from the request call. 
            The application can pass an object with any kind of information from the request module to the completion handler. </param>
        </member>
        <member name="T:OPCDA.NET.OnBGSrvDisconnected">
            <summary>
            BGServer.Disconnect completion notification.
            On successful competion the OPC server is disconnected.
            </summary>
            <param name="ex">null (Nothing) except when an error occured in the handling of the request.</param>
            <param name="tag">null (Nothing) or an object passed from the request call. 
            The application can pass an object with any kind of information from the request module to the completion handler. </param>
        </member>
        <member name="T:OPCDA.NET.OnBGSrvGetStatus">
            <summary>
            BGServer.GetStatus completion notification.
            </summary>
            <param name="ex">null (Nothing) except when an error occured in the handling of the request.
            On error the other paramters are invalid, except for the tag parameter.</param>
            <param name="stat">Status information retruned from the OPC server.</param>
            <param name="tag">null (Nothing) or an object passed from the request call. 
            The application can pass an object with any kind of information from the request module to the completion handler. </param>
        </member>
        <member name="T:OPCDA.NET.OnBGSrvBrowse">
            <summary>
            BGServer.Browse completion notification.
            The specified branch is browsed according the filter selections and the result is in the nodes argument.
            </summary>
            <param name="ex">null (Nothing) except when an error occured in the handling of the request.
            On error the other paramters are invalid, except for the tag parameter.</param>
            <param name="branch">Fully qualified ID of the browsed branch.</param>
            <param name="nodes">Browse result in an array of BrowseElement objects.</param>
            <param name="tag">null (Nothing) or an object passed from the request call. 
            The application can pass an object with any kind of information from the request module to the completion handler.</param>
        </member>
        <member name="T:OPCDA.NET.OnBGSrvGetProperties">
            <summary>
            BGServer.BGSrvGetProperties completion notification.
            The selected properties of set of items is returned.
            </summary>
            <param name="ex">null (Nothing) except when an error occured in the handling of the request.
            On error the other paramters are invalid, except for the tag parameter.</param>
            <param name="props">Item property information for the requested property IDs.</param>
            <param name="tag">null (Nothing) or an object passed from the request call. 
            The application can pass an object with any kind of information from the request module to the completion handler. </param>
        </member>
        <member name="T:OPCDA.NET.OnBGSrvAddGroup">
            <summary>
            BGServer.AddGroup completion notification.
            </summary>
            <param name="ex">null (Nothing) except when an error occured in the handling of the request.
            On error the other paramters are invalid, except for the tag parameter.</param>
            <param name="group">BGGroup object of the added group. </param>
            <param name="tag">null (Nothing) or an object passed from the request call. 
            The application can pass an object with any kind of information from the request module to the completion handler. </param>
        </member>
        <member name="T:OPCDA.NET.OnBGSrvAddDataBind">
            <summary>
            BGServer.AddDataBind  completion notification.
            </summary>
            <param name="ex">null (Nothing) except when an error occured in the handling of the request.
            On error the other paramters are invalid, except for the tag parameter.</param>
            <param name="dbind">Added BGDataBind object.</param>
            <param name="tag">null (Nothing) or an object passed from the request call. 
            The application can pass an object with any kind of information from the request module to the completion handler. </param>
        </member>
        <member name="T:OPCDA.NET.OnBGGrpRemoved">
            <summary>
            BGGroup.Remove completion notification.
            </summary>
            <param name="ex">null (Nothing) except when an error occured in the handling of the request.
            On error the other paramters are invalid, except for the tag parameter.</param>
            <param name="tag">null (Nothing) or an object passed from the request call. 
            The application can pass an object with any kind of information from the request module to the completion handler. </param>
        </member>
        <member name="T:OPCDA.NET.OnBGGrpAddItems">
            <summary>
            BGGroup.AddItems completion notification.
            </summary>
            <param name="ex">null (Nothing) except when an error occured in the handling of the request.
            On error the other paramters are invalid, except for the tag parameter.</param>
            <param name="rslt">Array with result information from the server for the added items.</param>
            <param name="srvHandles">Array with server handles of the added items. The server handle is part
            of the OPCItemResult object returned from the server. The handles are provided in an int array 
            for conveniance. Such an array can be used in a Read call.</param>
            <param name="tag">null (Nothing) or an object passed from the request call. 
            The application can pass an object with any kind of information from the request module to the completion handler. </param>
        </member>
        <member name="T:OPCDA.NET.OnBGGrpRemoveItems">
            <summary>
            BGGroup.RemoveItems completion notification.
            </summary>
            <param name="ex">null (Nothing) except when an error occured in the handling of the request.
            On error the other paramters are invalid, except for the tag parameter.</param>
            <param name="rslt">Array with HRESULTS values indicating the success for each item. 
            Is null (Nothing) if all items were successfully removed.</param>
            <param name="tag">null (Nothing) or an object passed from the request call. 
            The application can pass an object with any kind of information from the request module to the completion handler. </param>
        </member>
        <member name="T:OPCDA.NET.OnBGGrpRead">
            <summary>
            BGGroup.Read completion notification.
            </summary>
            <param name="ex">null (Nothing) except when an error occured in the handling of the request.
            On error the other paramters are invalid, except for the tag parameter.</param>
            <param name="requestErrors">Array with HRESULT success/error codes indicating if the server 
            accepted the read request.</param>
            <param name="rslt">Read result for the items for which the server accepted the read request.</param>
            <param name="tag">null (Nothing) or an object passed from the request call. 
            The application can pass an object with any kind of information from the request module to the completion handler. </param>
        </member>
        <member name="T:OPCDA.NET.OnBGGrpWrite">
            <summary>
            BGGroup.Write completion notification.
            </summary>
            <param name="ex">null (Nothing) except when an error occured in the handling of the request.
            On error the other paramters are invalid, except for the tag parameter.</param>
            <param name="requestErrors">Array with HRESULT success/error codes indicating if the server 
            accepted the write request.</param>
            <param name="rslt">Write result for the items for which the server accepted the write request.
            Is null (Nothing) if all items were successfully removed.</param>
            <param name="tag">null (Nothing) or an object passed from the request call. 
            The application can pass an object with any kind of information from the request module to the completion handler. </param>
        </member>
        <member name="T:OPCDA.NET.OnBGRefresh">
            <summary>
            BGGroup.Refresh completion notification
            </summary>
            <param name="ex">null (Nothing) except when an error occured in the handling of the request.
            On error the other paramters are invalid, except for the tag parameter.</param>
            <param name="tag">null (Nothing) or an object passed from the request call. 
            The application can pass an object with any kind of information from the request module to the completion handler. </param>
        </member>
        <member name="T:OPCDA.NET.OnBGSubscribe">
            <summary>
            BGDataBind.Subscribe completion notification.
            A subscription object is returned when the Subscribe was successful. This Subscription object allows 
            access to methods of the DataBind object and even the underlying OpcGroup object. However, such an access is 
            executed in the calling thread and may block the thread.
            </summary>
            <param name="ex">null (Nothing) except when an error occured in the handling of the request.
            On error the other paramters are invalid, except for the tag parameter.</param>
            <param name="odbSubscr">Subscription object of the added DataBind subscription.</param>
            <param name="tag">null (Nothing) or an object passed from the request call. 
            The application can pass an object with any kind of information from the request module to the completion handler. </param>
        </member>
        <member name="T:OPCDA.NET.OpcServer">
            <summary>
            <b>The OpcServer class contains the functions as defined in the OPC Server object.<br/><br/>
            The OPCServer object is the primary object that an OPC server exposes. 
            It's most important function is AddGroup. All the item access functions are implemented in 
            the OpcGroup class. The user can define a number of groups with different parameters such 
            as the update rate.</b>
            </summary>
        </member>
        <member name="M:OPCDA.NET.OpcServer.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:OPCDA.NET.OpcServer.Connect(System.String,System.String)">
            <summary>
            Connect to the named remote OPC Server.<br/>
            An instance of the OPC COM server is created. The server is launched if it is not already 
            running in the same user. If different applications access the same OPC server then you 
            need to configure DCOM so that all applications launch the OPC server under the same user. 
            Otherwise multiple instances of the OPC server are created.<br/>
            The OpcEnum server browser is accessed on the remote machine to find the CLSID of the 
            named OPC server.<br/><br/>
            The Disconnect method needs to be called to release the OPC server before the client program exits.
            </summary>
            <param name="ComputerName">Computer network name</param>
            <param name="SrvName">Server ProgId</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.Connect(System.String)">
            <summary>
            Connect to the named OPC Server.<br/>
            The name is the Server's ProgId such as  Advosol.SimDAServer.1  to connect to a local OPC server.
            To connect to a remote server either:<br/>
            a) specify the fully qualified name such as  \\Comp17\Advosol.SimDAServer.1<br/>
            b) use the Connect(string,string) method<br/><br/>
            An instance of the OPC COM server is created. The server is launched if it is not already 
            running in the same user. If different applications access the same OPC server then you 
            need to configure DCOM so that all applications launch the OPC server under the same user. 
            Otherwise multiple instances of the OPC server are created.<br/>
            The OpcEnum server browser is accessed on the remote machine to find the CLSID of the 
            named OPC server.<br/><br/>
            The Disconnect method needs to be called to release the OPC server before the client program exits.
            </summary>
            <param name="SrvName">Server ProgId name in the form   serverName  or   \\machineName\serverName   
            or   //machineName/serverName</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.Connect(OPC.Common.Host,System.String)">
            <summary>
            Connect to the named remote OPC Server. The OPC server is accessed with the defined credentials.
            The host computer name and optionally the user/password/domain can be defined. 
            What needs to be defined to be able to launch or access an OPC server on a remote computer 
            depends on the network, security and DCOM configuration.<br/>
            An instance of the OPC COM server is created. The server is launched if it is not already 
            running in the same user. If different applications access the same OPC server then you need 
            to configure DCOM so that all applications launch the OPC server under the same user. 
            Otherwise multiple instances of the OPC server are created.<br/>
            The OpcEnum server browser is accessed on the remote machine to find the CLSID of the 
            named OPC server. OpcEnum is accessed with the defined credentials.<br/><br/>
            The Disconnect method needs to be called to release the OPC server before the client program exits.
            </summary>
            <param name="accessInfo">Computer name and optional username/password/domain</param>
            <param name="SrvName">Server ProgId</param>
            <returns></returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.ConnectLocal(System.String)">
            <summary>
            Connect to the named OPC Server
            </summary>
            <param name="SrvName">IN: Server ProgId name</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.ConnectRemoteNIOS(System.String,System.String)">
            <summary>
            Connect to the named remote OPC Server using .Net Interop Services
            Must be used for OPC V1 servers
            </summary>
            <param name="ComputerName">IN: name of the remote computer</param>
            <param name="SrvName">IN: Server ProgId name</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.Connect(System.Guid)">
            <summary>
            DEPRECIATED. Use Connect(string SrvName) <br/>
            Connect to the local OPC Server with the specified CLSID.<br/>
            An instance of the OPC COM server is created. The server is launched if it is not already 
            running in the same user. If different applications access the same OPC server then you need 
            to configure DCOM so that all applications launch the OPC server under the same user. 
            Otherwise multiple instances of the OPC server are created.<br/><br/>
            The Disconnect method needs to be called to release the OPC server before the client program exits.
            </summary>
            <param name="ClsidOPCserver">IN: CLSID of the server</param>
            <returns></returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.Connect(System.String,System.Guid)">
            <summary>
            DEPRECIATED. Use Connect( string ComputerName, string SrvName )<br/>
            Connect to the remote OPC Server with the specified CLSID on the specified machine.<br/>
            An instance of the OPC COM server is created. The server is launched if it is not already 
            running in the same user. If different applications access the same OPC server then you need 
            to configure DCOM so that all applications launch the OPC server under the same user. 
            Otherwise multiple instances of the OPC server are created.<br/>
            The method overload has the advantage that OpcEnum on the remote machen needs not be 
            accessed to find the CLSID of the OPC server to be connected.<br/><br/>
            The Disconnect method needs to be called to release the OPC server before the client program exits.
            </summary>
            <param name="ComputerName">Network computer name</param>
            <param name="ClsidOPCserver">CLSID of the server</param>
            <returns></returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.Connect(OPC.Common.Host,System.Guid)">
            <summary>
            DEPRECIATED. Use Connect( Host accessInfo, string SrvName )<br/>
            Connect to the remote OPC Server with the specified CLSID on the specified machine. 
            The server access is made with the defined credentials (user/password/domain).<br/>
            An instance of the OPC COM server is created. The server is launched if it is not already 
            running in the same user. If different applications access the same OPC server then you need 
            to configure DCOM so that all applications launch the OPC server under the same user. 
            Otherwise multiple instances of the OPC server are created.<br/>
            The method overload has the advantage that OpcEnum on the remote machen needs not be 
            accessed to find the CLSID of the OPC server to be connected.<br/><br/>
            The Disconnect method needs to be called to release the OPC server before the client program exits.
            </summary>
            <param name="accessInfo">Server access definitions</param>
            <param name="ClsidOPCserver">IN: CLSID of the server</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.GetProperties(System.String[],System.Boolean,System.Int32[])">
            <summary>
            Returns the properties for a set of items. ( OPCDA V3, IOPCBrowse::GetProperties )<br/>
            In the OPCDA.NET Professional Edition this method is available also for OPCDA V2 servers.
            With OPCDA V2 servers the method is emulated by calling the available OPCDA V2 item properties methods.<br/>
            <br/>
            An OPCException is thrown if the OPC Server returns an error.
            </summary>
            <param name="itemIDs">An array with ItemID definitions for which the caller wants 
            to read the list of properties. </param>
            <param name="returnValues">Server must return the property values in addition to 
            the property names.</param>
            <param name="propertyIDs">Array with the ID's of the item properties to be read. 
            The property IDs are as defined in the OPC specification and as returned in the 
            QueryAvailableProperies method.<br/>
            If NULL then all available properties are returned.</param>
            <returns>Array of ItemProperties returned by the Server.</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.Browse(System.String,System.String@,System.Int32,OPCDA.NET.browseFilter,System.String,System.String,System.Boolean,System.Boolean,System.Int32[],System.Boolean@)">
            <summary>
            This OPC DA V3 method browses a single branch of the address space and returns zero or more 
            OPCBROWSEELEMENT structures ( OPCDA V3, IOPCBrowse::Browse ).<br/>
            In the OPCDA.NET Professional Edition this method is available also for OPCDA V2 servers.
            With OPCDA V2 servers the method is emulated by calling the available OPCDA V2 browse methods.<br/>
            <br/>
            It is assumed that the underlying server address space is hierarchical. 
            A flat space will always be presented to the client as not having children. 
            A hierarchical space can be presented to the client as either not having children or 
            having children. A hierarchical presentation of the server address space would behave 
            much like a file system, where the directories are the branches or paths, and the files 
            represent the leaves or items. For example, a server could present a control system by 
            showing all the control networks, then all of the devices on a selected network, and then 
            all of the classes of data within a device, then all of the data items of that class. 
            A further breakdown into vendor specific ‘Units’ and ‘Lines’ might be appropriate for a 
            BATCH system.<br/>
            The browse position is initially set to the ‘root’ of the address space. 
            On subsequent calls, the client may choose to browse from the continuation point. 
            This browse can also be filtered by a vendor specific filter string.
            The itemID must be the value of ItemID returned with a BrowseElement from a previous call 
            to browse or an empty string (used to indicate a top level browse).
            The ItemID is a fully qualified descriptor for the element that can be used for further 
            browsing and as an item id if BrowseElement.IsItem is set. Note, that it is possible for a 
            single element to be both an item and have children (e.g. complex data items).
            If the level specified ItemID is valid, but does not have any children, 
            then the Browse will succeed, but the result will be a zero length BrowseElements array.<br/>
            If the filter criteria result in an empty result, then the Browse will still succeed.
            </summary>
            <param name="itemID">The name of the branch in the hierarchy to browse. If the root branch 
            is to be browsed then a NUL string is passed.</param>
            <param name="continuationPoint">If this is a secondary call to Browse, the previous call 
            might have returned a Continuation Point where the Browse can restart from. 
            Clients must pass a NUL string in the initial call to Browse. This is an opaque value, 
            which the server creates. A Continuation Point will be returned if a Server does support 
            Continuation Point, and the reply is larger than dwMaxElementsReturned. 
            The Continuation Point will allow the Client to resume the Browse from the previous 
            completion point.</param>
            <param name="maxElements">Server must not return any more elements than this value. 
            If the server supports Continuation Points, then the Server may return a Continuation Point 
            at a value less than dwMaxElementsReturned. If the server does not support Continuation Points, 
            and more than dwMaxElementsReturned are available, then the Server shall return the first 
            dwMaxElementsReturned elements and set the pbMoreElements parameter to TRUE.<br/>
            If dwMaxElementsReturned is 0 then there is no client side restriction on the number of 
            returned elements.</param>
            <param name="mode">An enumeration {All, Branch, Item} specifying which subset of browse 
            elements to return. See the table in the comments section below to determine which combination 
            of bits in BrowseElement.dwFlagValue are returned for each value in browseFilter.</param>
            <param name="elementFilter">A wildcard string that conforms to the Visual Basic LIKE operator, 
            which will be used to filter Element names. A NUL String implies no filter.</param>
            <param name="vendorFilter">A server specific filter string. This is entirely free format and 
            may be entered by the user via an EDIT field. A pointer to a NUL string indicates no filtering.</param>
            <param name="returnProperties">Server must return all properties which are available for 
            each of the returned elements. If true, pdwPropertyIDs is ignored.</param>
            <param name="returnValues">Server must return the property values in addition to the 
            property names.</param>
            <param name="propertyIDs">An array of Property IDs to be returned with each element. 
            If bReturnAllProperties is true, pdwPropertyIDs is ignored and all properties are returned.</param>
            <param name="moreElements">If the Server does not support a Continuation Point then the 
            server will set pbMoreElements to True if there are more elements than dwMaxElementsReturned.</param>
            <returns>Array of BrowseElement objects returned by the Server.</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.Read(System.String[],System.Int32)">
            <summary>
            OPCDA V3.   Reads a group of items with all the same maxAge<br/>
            The purpose of this OPC V3 method is to provide an extremely easy way for simple 
            applications to obtain OPC data. Programmers should be aware that in most servers, 
            the design of the Group based OPC interfaces will provide much better performance than 
            this method. In terms of performance, the user of this method should assume that it will 
            behave as if he were to create a group, add the items, perform a single read or write and 
            then delete the group.
            </summary>
            <remarks>
            In case of errors an OPCException is thrown.<br/>
            Error accessing individual items are reported in the returned ItemValue object.
            </remarks>
            <param name="itemIDs">A list of fully qualified ItemIDs. These might be obtained from 
            OpcServer.Browse()</param>
            <param name="maxAge">A “staleness” for all items, requested in milliseconds. 
            The server will calculate, for each requested item, the number of milliseconds between “now” 
            and the timestamp on each item. For each item that has not been updated within the last MaxAge 
            milliseconds, must be obtained from the underlying device. Or if the item is not available 
            from the cache, it will also need to be obtained from the underlying device. A max age of 0 
            is equivalent to OPC_DS_DEVICE and a max age of 0xFFFFFFFF is equivalent to OPC_DS_CACHE.
            Without existence of a cache the server will always read from device. 
            In this case MaxAge is not relevant. Some servers maintain a global cache for all clients. 
            If the needed item is in this global cache, it is expected that the server makes use of it 
            to check the MaxAge value. Servers should not automatically create or change the caching of 
            an item based on a Read call with MaxAge.<br/>
            (Note: Since this is a INT32 of milliseconds, the largest MaxAge value would be 
            approximately 24 days).</param>
            <returns>returned value, quality, timestamp and error information.</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.Read(System.String[],System.Int32[])">
            <summary>
            OPCD V3.  Reads a group of items with individual maxAges<br/>
            The purpose of this OPC V3 method is to provide an extremely easy way for simple applications 
            to obtain OPC data. Programmers should be aware that in most servers, the design of the Group 
            based OPC interfaces will provide much better performance than this method. In terms of 
            performance, the user of this method should assume that it will behave as if he were to create 
            a group, add the items, perform a single read or write and then delete the group.
            </summary>
            <remarks>
            In case of errors an OPCException is thrown.<br/>
            Error accessing individual items are reported in the returned ItemValue object.
            </remarks>
            <param name="itemIDs">A list of fully qualified ItemIDs. These might be obtained from 
            OpcServer.Browse()</param>
            <param name="maxAges">An array with “staleness” for each item, requested in milliseconds. 
            The server will calculate, for each requested item, the number of milliseconds between “now” 
            and the timestamp on each item. For each item that has not been updated within the last MaxAge 
            milliseconds, must be obtained from the underlying device. Or if the item is not available 
            from the cache, it will also need to be obtained from the underlying device. A max age of 0 
            is equivalent to OPC_DS_DEVICE and a max age of 0xFFFFFFFF is equivalent to OPC_DS_CACHE. 
            Without existence of a cache the server will always read from device. In this case MaxAge 
            is not relevant. Some servers maintain a global cache for all clients. If the needed item is 
            in this global cache, it is expected that the server makes use of it to check the MaxAge value. 
            Servers should not automatically create or change the caching of an item based on a Read call 
            with MaxAge.</param>
            <returns>Returned value, quality, timestamp and error information.</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.Write(OPCDA.NET.ItemValue[])">
            <summary>
            OPCDA V3.   Writes a group of items.<br/>
            The purpose of this OPC V3 method is to provide an extremely easy way for simple applications 
            to write OPC data. Programmers should be aware that in most servers, the design of the Group 
            based OPC interfaces will provide much better performance than this method. In terms of 
            performance, the user of this method should assume that it will behave as if he were to 
            create a group, add the items, perform a single Write or write and then delete the group.
            </summary>
            <remarks>
            In case of errors an OPCException is thrown.<br/>
            Error accessing individual items are reported in the returned ItemValue object.
            </remarks>
            <param name="items">An array of ItemValue objects with the value, quality and timestamp for each item.</param>
            <returns>Array with error information for each item.</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.Disconnect">
            <summary>
            Disconnect from the OPC server. The COM interface are released.
            </summary>
        </member>
        <member name="M:OPCDA.NET.OpcServer.GetStatus(OPCDA.SERVERSTATUS@)">
            <summary>
            Get the current status of the OPC Server.<br/>
            See OPC specs IOPCServer::GetStatus for details.
            </summary>
            <remarks>
            If the client relies on asynchronous refresh and does not periodically access the server, 
            then it should periodically call GetStatus to determine that the server is still connected 
            and available.
            </remarks>
            <param name="serverStatus">Out: Current server status</param>
            <returns></returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.GetStatus(OPCDA.SrvStatus@)">
            <summary>
            Get the current status of the OPC Server in an object with .Net types.  
            See OPC specs IOPCServer::GetStatus for details.
            </summary>
            <remarks>
            If the client relies on asynchronous refresh and does not periodically access the server, 
            then it should periodically call GetStatus to determine that the server is still connected 
            and available.
            </remarks>
            <param name="serverStatus">OUT: current server status</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.GetStatus(OPCDA.SrvStatus2@)">
            <summary>
            Get the current status of the OPC Server in an object with .Net types.  
            See OPC specs IOPCServer::GetStatus for details.
            </summary>
            <remarks>
            If the client relies on asynchronous refresh and does not periodically access the server, 
            then it should periodically call GetStatus to determine that the server is still connected 
            and available.
            </remarks>
            <param name="serverStatus">OUT: current server status</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.GetErrorString(System.Int32,System.Int32)">
            <summary>
            Return the description for the specified error. If any error occurs an OPCException is thrown.<br/> 
            The expected behavior is that this will include handling of Win32 errors as well (such as 
            RPC errors).<br/>
            Note that if this method is being called via DCOM then it is very possible that RPC or 
            other network related errors will be returned. For this reason it is probably good practice 
            for the client to attempt to call a local Win32 function such as FormatMessage if this 
            function fails. 
            </summary>
            <param name="errorCode">IN: HRESULTS error code</param>
            <param name="localeID">IN: requested LocaleId</param>
            <returns>Error description string</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.AddBrowseTree">
            <summary>
            creates a new BrowseTree class for convenient browsing of the servers
            item tree structure.
            </summary>
            <returns>BrowseTree object</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.AddBrowseTree(System.Windows.Controls.TreeView)">
            <summary>
            creates a new BrowseTree class for convenient browsing of the servers
            item tree structure.
            </summary>
            <param name="tvServer">TreeView control that displays the browsed branches/items.</param>
            <returns>BrowseTree object</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.ShowBrowseTree(System.Windows.Controls.TreeView)">
            <summary>
            Create a new BrowseTree class for convenient browsing and display of the server's
            item tree structure.
            </summary>
            <param name="tvServer"></param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.ShowBrowseTreeList(System.Windows.Controls.TreeView,System.Windows.Controls.ListView)">
            <summary>
            Create a new BrowseTreeList class for convenient browsing and display of the servers
            item tree structure with the branches in a TreeView control and the items of each branch in a
            ListView control.
            An empty ShowBrowseTreeList object is created and the default BrowseTree ImageList is assigned 
            to the TreeView and ListView control. The browse mode is set to BrowseModeOneLevel=true.
            </summary>
            <param name="tvBranches"></param>
            <param name="lvItems"></param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.AddSyncIOGroup">
            <summary>
            Create a SyncIOGroup object.<br/>
            The SyncIOGroup class offer a set of functions for simplified synchronuous read/write access 
            to server items. These methods are not defined in the OPC standard and the SyncIOGroup class 
            is actually a software layer above the OpcGroup class. It handles the OPC group management 
            functions internally and allows a simple access to items by just specifiyng the item name.
            </summary>
            <returns>SyncIOGroup object</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.AddRefreshGroup(System.Int32,OPCDA.NET.RefreshEventHandler)">
            <summary>
            Create a RefreshGroup object.<br/>
            The RefreshGroup class offers a set of functions for simplified asynchronuous server access. 
            These methods are not defined in the OPC standard and the RefreshGroup class is actually a 
            software layer above the OpcGroup class. It handles the OPC group management functions 
            internally and allows a simple access to items by just specifiyng the item name. A data cache 
            is maintained for all added or referenced items. This cache is updated from the OPC group data 
            callback function. The user can always read up-to-date values from the cache but also can 
            attach his own callback handler.
            </summary>
            <param name="Rate">Requested update rate in ms</param>
            <param name="UserHnd">User data callback handler. May be null (VB Nothing) if no user event 
            handling is required. In this case onl the RefreshGroup internal value cache is updated in 
            the callback.</param>
            <returns>RefreshGroup object</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.AddRefreshGroup(OPCDA.NET.RefreshEventHandler)">
            <summary>
            Create a RefreshGroup object with an update rate of 500 ms.<br/>
            The RefreshGroup class offers a set of functions for simplified asynchronuous server access. 
            These methods are not defined in the OPC standard and the RefreshGroup class is actually a 
            software layer above the OpcGroup class. It handles the OPC group management functions 
            internally and allows a simple access to items by just specifiyng the item name. A data cache 
            is maintained for all added or referenced items. This cache is updated from the OPC group data 
            callback function. The user can always read up-to-date values from the cache but also can 
            attach his own callback handler.
            </summary>
            <param name="UserHnd">User data callback handler. May be null (VB Nothing) if no user event 
            handling is required. In this case onl the RefreshGroup internal value cache is updated in 
            the callback.</param>
            <returns>RefreshGroup object</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.AddGroup(System.String,System.Boolean,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Add a new group.     ( IOPCServer::AddGroup )<br/>
            The OPC parameters DeadBand and LocaleId are set to zero.<br/>
            Error code returned, no exception thrown. Added in V2.1
            </summary>
            <param name="groupName">Name of the new group. The name must be unique among the other groups 
            created by this client. If the name is en empty string ("") then the server will generate a unique 
            name. The server generated name will also be unique relative to any existing public groups.</param>
            <param name="setActive">Initial active state. true for active and false for inactive.</param>
            <param name="requestedUpdateRate">Client specifies the fastest rate at which data changes may 
            be sent to OnDataChange for items in this group. This also indicates the desired accuracy of 
            Cached Data. This is intended only to control the behavior of the interface. How the server 
            deals with the update rate and how often it actually polls the hardware internally is an 
            implementation detail. Passing 0 indicates the server should use the fastest practical rate. 
            The rate is specified in milliseconds. </param>
            <param name="ClientHandle">Client provided handle for this group. The client handle is 
            returned in asynchronous data callback to enable the client to identify the data.</param>
            <param name="err">OUT: HRESULT error/success code</param>
            <returns>OpcGroup object</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.AddGroup(System.String,System.Boolean,System.Int32,System.Single@,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Add a new group.     ( IOPCServer::AddGroup )<br/>
            The OPC parameters DeadBand and LocaleId are set to zero.<br/>
            Errors are returned in the err parameter.
            </summary>
            <param name="groupName">Name of the new group. The name must be unique among the other groups 
            created by this client. If the name is en empty string ("") then the server will generate a unique 
            name. The server generated name will also be unique relative to any existing public groups.</param>
            <param name="setActive">Initial active state. true for active and false for inactive.</param>
            <param name="requestedUpdateRate">Client specifies the fastest rate at which data changes may 
            be sent to OnDataChange for items in this group. This also indicates the desired accuracy of 
            Cached Data. This is intended only to control the behavior of the interface. How the server 
            deals with the update rate and how often it actually polls the hardware internally is an 
            implementation detail. Passing 0 indicates the server should use the fastest practical rate. 
            The rate is specified in milliseconds. </param>
            <param name="percentDeadband">IN: DeadBand value in %</param>
            <param name="localeID">IN: requested LocalId or 0</param>
            <param name="ClientHandle">Client provided handle for this group. The client handle is 
            returned in asynchronous data callback to enable the client to identify the data.</param>
            <param name="err">OUT: HRESULT error/success code</param>
            <returns>OpcGroup object</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.AddGroup(System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Add a new group.     ( IOPCServer::AddGroup )<br/>
            The OPC parameters DeadBand and LocaleId are set to zero.<br/>
            If any error occurs an OPCException is thrown. 
            </summary>
            <param name="groupName">Name of the new group. The name must be unique among the other groups 
            created by this client. If the name is en empty string ("") then the server will generate a unique 
            name. The server generated name will also be unique relative to any existing public groups.</param>
            <param name="setActive">Initial active state. true for active and false for inactive.</param>
            <param name="requestedUpdateRate">Client specifies the fastest rate at which data changes may 
            be sent to OnDataChange for items in this group. This also indicates the desired accuracy of 
            Cached Data. This is intended only to control the behavior of the interface. How the server 
            deals with the update rate and how often it actually polls the hardware internally is an 
            implementation detail. Passing 0 indicates the server should use the fastest practical rate. 
            The rate is specified in milliseconds. </param>
            <param name="ClientHandle">Client provided handle for this group. The client handle is 
            returned in asynchronous data callback to enable the client to identify the data.</param>
            <returns>OpcGroup object</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.AddGroup(System.String,System.Boolean,System.Int32,System.Single@,System.Int32,System.Int32)">
            <summary>
            Add a new group.     ( IOPCServer::AddGroup )<br/>
            Errors are returned in the err parameter.
            </summary>
            <param name="groupName">Name of the new group. The name must be unique among the other groups 
            created by this client. If the name is en empty string ("") then the server will generate a unique 
            name. The server generated name will also be unique relative to any existing public groups.</param>
            <param name="setActive">Initial active state. true for active and false for inactive.</param>
            <param name="requestedUpdateRate">Client specifies the fastest rate at which data changes may 
            be sent to OnDataChange for items in this group. This also indicates the desired accuracy of 
            Cached Data. This is intended only to control the behavior of the interface. How the server 
            deals with the update rate and how often it actually polls the hardware internally is an 
            implementation detail. Passing 0 indicates the server should use the fastest practical rate. 
            The rate is specified in milliseconds. </param>
            <param name="percentDeadband">IN: DeadBand value in %</param>
            <param name="localeID">IN: requested LocalId or 0</param>
            <param name="ClientHandle">Client provided handle for this group. The client handle is 
            returned in asynchronous data callback to enable the client to identify the data.</param>
            <returns>OpcGroup object</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.RemoveGroup(OPCDA.NET.OpcGroup,System.Boolean)">
            <summary>
            The specified OPC server group is removed. This method is the same as the RemoveGroup method 
            in the group class and usually the group class method is used. The RemoveGroup is available 
            in the server class because the OPC specification defines it in the server interface.<br/>
            The RemoveGroup method differs from IOPCServer::RemoveGroup by having
            a GroupObject reference parameter instead of the OPC server group handle.<br/>
            </summary>
            <param name="groupObject">Object of the group to be removed</param>
            <param name="bForce">Forces deletion of the group even if references are outstanding. 
            Usually the method is called with this parameter TRUE.</param>
            <returns></returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.SetLocaleID(System.Int32)">
            <summary>
            Set the default LocaleId for this session.  ( IOPCCommon::SetLocaleID )
            </summary>
            <param name="lcid">IN: requested LocalId</param>
            <returns></returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.GetLocaleID(System.Int32@)">
            <summary>
            Get the current default LocalID.  ( IOPCCommon::GetLocaleID )
            </summary>
            <param name="lcid">OUT: LocaleId code</param>
            <returns></returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.QueryAvailableLocaleIDs(System.Int32[]@)">
            <summary>
            Query the LocaleIDs supported by the OPC Server. ( IOPCCommon::QueryAvailableLocaleIDs )
            If any error occurs a ThrowExceptionForHR is thrown. 
            </summary>
            <param name="lcids">OUT: array with LocalIDs</param>
            <returns></returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.SetClientName(System.String)">
            <summary>
            Define a client name.  ( IOPCCommon::SetClientName )<br/>
            Allows the client to optionally register a client name with the server. 
            This is included primarily for debugging purposes. The recommended behavior is that the client 
            set his Node name and EXE name here. 
            </summary>
            <param name="name">IN: name, e.g. node and exe name</param>
            <returns></returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.ShutdownRTLogging(System.String,System.String)">
            <summary>
            DeltaV specific fature to control DeltaV server logging
            </summary>
            <returns></returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.QueryOrganization">
            <summary>
            Query the server organization, flat or hierarchical.  ( IOPCBrowseServerAddressSpace:: QueryOrganization )<br/>
            Provides a way to determine if the underlying system is inherently flat or hierarchical and how 
            the server may represent the information of the address space to the client.<br/>
            FLAT and HIERARCHICAL spaces behave somewhat different. If the result is 'FLAT' then the client 
            knows that there is no need to pass the BRANCH or LEAF flags to BrowseOPCItemIDs or to call 
            ChangeBrowsePosition.
            </summary>
            <returns>Item organization of the server</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.ChangeBrowsePosition(OPCDA.OPCBROWSEDIRECTION,System.String)">
            <summary>
            Change the current browse position. Move up, down or to in the hierarchical
            address space.  ( IOPCBrowseServerAddressSpace:: ChangeBrowsePosition )<br/>
            The function will return E_FAIL if called for a FLAT space. An error is returned if the passed 
            string does not represent a 'branch'. Moving UP from the 'root' will return E_FAIL. <br/>
            Note OPC_BROWSE_TO is new for version 2.0. Clients should be prepared to handle E_INVALIDARG if 
            they pass this to a 1.0 server. 
            </summary>
            <param name="direction">IN: direction, up, down or to</param>
            <param name="name">IN: branch name to move to</param>
            <returns></returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.BrowseOPCItemIDs(OPCDA.OPCBROWSETYPE,System.String,System.Type,OPCDA.OPCACCESSRIGHTS,System.String[]@)">
            <summary>
            Returns a string[] with a list of ItemIDs/branches as determined by the passed 
            parameters. The position from the which the browse is done can be set via 
            ChangeBrowsePosition. ( IOPCBrowseServerAddressSpace:: BrowseOPCItemIDs )<br/>
            The returned string array may be empty if no ItemIDs satisfied the filter constraints. 
            The strings returned represent the BRANCHs and LEAFS contained in the current level. 
            They do NOT include any delimiters or 'parent' names. (See GetItemID). 
            Whenever possible the server should return strings which can be passed directly to AddItems. 
            However, it is allowed for the Server to return a 'hint' string rather than an actual legal Item ID. 
            For example a PLC with 32000 registers could return a single string of "0 to 31999" rather than 
            return 32,000 individual strings from the enumerator. For this reason (as well as the fact that 
            browser support is optional) clients should always be prepared to allow manual entry of ITEM ID 
            strings. In the case of 'hint' strings, there is no indication given as to whether the returned 
            string will be acceptable by AddItem or ValidateItem.
            </summary>
            <param name="filterType">IN: branch/leaf filter<br/>
            OPC_BRANCH - returns only items that have children<br/>
            OPC_LEAF - returns only items that don't have children<br/>
            OPC_FLAT - returns everything at and below this level including all children of children - 
            basically 'pretends' that the address space in actually FLAT<br/>
            This parameter is ignored for FLAT address space. </param>
            <param name="filterCriteria">A server specific filter string. 
            This is entirely free format and may be entered by the user via an EDIT field. 
            Although the valid criteria are vendor specific, source code for a recommended filter function 
            is included in an Apppendix at the end of this document. This particular filter function is 
            commonly used by OPC interfaces and is very similar in functionality to the LIKE function in 
            Visual Basic. A pointer to a NUL string indicates no filtering. </param>
            <param name="sTypeFilter">Data type filter specified as a .Net data type<br/>
            Filter the returned list based in the available datatypes (those that would succeed if passed to 
            AddItem). Type void indicates no filtering.</param>
            <param name="accessRightsFilter">Filter based on the AccessRights bit mask (OPC_READABLE or OPC_WRITEABLE). 
            The bits passed in the bitmask are 'ANDed' with the bits that would be returned for this Item by 
            AddItem, ValidateItem or EnumOPCItemAttributes. If the result is non-zero then the item is returned. 
            A 0 value in the bitmask indicates that the AccessRights bits should be ignored during the filtering 
            process.</param>
            <param name="nodes">OUT: string array with the browsed items.</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.BrowseOPCItemIDs(OPCDA.OPCBROWSETYPE,System.String,System.Type,OPCDA.OPCACCESSRIGHTS,System.Runtime.InteropServices.ComTypes.IEnumString@)">
            <summary>
            Returns an IENUMString for a list of ItemIDs as determined by the passed 
            parameters. The position from the which the browse is done can be set via 
            ChangeBrowsePosition. ( IOPCBrowseServerAddressSpace:: BrowseOPCItemIDs )<br/>
            The returned enumerator may have nothing to enumerate if no ItemIDs satisfied the filter constraints.
            The strings returned by the enumerator represent the BRANCHs and LEAFS contained in the current level. 
            They do NOT include any delimiters or 'parent' names. (See GetItemID). 
            Whenever possible the server should return strings which can be passed directly to AddItems. 
            However, it is allowed for the Server to return a 'hint' string rather than an actual legal Item ID. 
            For example a PLC with 32000 registers could return a single string of "0 to 31999" rather than 
            return 32,000 individual strings from the enumerator. For this reason (as well as the fact that 
            browser support is optional) clients should always be prepared to allow manual entry of ITEM ID 
            strings. In the case of 'hint' strings, there is no indication given as to whether the returned 
            string will be acceptable by AddItem or ValidateItem.
            </summary>
            <param name="filterType">IN: branch/leaf filter<br/>
            OPC_BRANCH - returns only items that have children<br/>
            OPC_LEAF - returns only items that don't have children<br/>
            OPC_FLAT - returns everything at and below this level including all children of children - 
            basically 'pretends' that the address space in actually FLAT<br/>
            This parameter is ignored for FLAT address space. </param>
            <param name="filterCriteria">A server specific filter string. 
            This is entirely free format and may be entered by the user via an EDIT field. 
            Although the valid criteria are vendor specific, source code for a recommended filter function 
            is included in an Apppendix at the end of this document. This particular filter function is 
            commonly used by OPC interfaces and is very similar in functionality to the LIKE function in 
            Visual Basic. A pointer to a NUL string indicates no filtering. </param>
            <param name="sTypeFilter">Data type filter specified as a .Net data type<br/>
            Filter the returned list based in the available datatypes (those that would succeed if passed to 
            AddItem). Type void indicates no filtering. In C# the void type is specified as typeof(void), in VB it's 
            Type.GetType("System.Void")</param>
            <param name="accessRightsFilter">Filter based on the AccessRights bit mask (OPC_READABLE or OPC_WRITEABLE). 
            The bits passed in the bitmask are 'ANDed' with the bits that would be returned for this Item by 
            AddItem, ValidateItem or EnumOPCItemAttributes. If the result is non-zero then the item is returned. 
            A 0 value in the bitmask indicates that the AccessRights bits should be ignored during the filtering 
            process.</param>
            <param name="stringEnumerator">OUT: string enumerator</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.BrowseOPCItemIDs(OPCDA.OPCBROWSETYPE,System.String,System.Runtime.InteropServices.VarEnum,OPCDA.OPCACCESSRIGHTS,System.Runtime.InteropServices.ComTypes.IEnumString@)">
            <summary>
            Returns an IENUMString for a list of ItemIDs as determined by the passed 
            parameters. The position from the which the browse is done can be set via 
            ChangeBrowsePosition. ( IOPCBrowseServerAddressSpace:: BrowseOPCItemIDs )<br/>
            The returned enumerator may have nothing to enumerate if no ItemIDs satisfied the filter constraints.
            The strings returned by the enumerator represent the BRANCHs and LEAFS contained in the current level. 
            They do NOT include any delimiters or 'parent' names. (See GetItemID). 
            Whenever possible the server should return strings which can be passed directly to AddItems. 
            However, it is allowed for the Server to return a 'hint' string rather than an actual legal Item ID. 
            For example a PLC with 32000 registers could return a single string of "0 to 31999" rather than 
            return 32,000 individual strings from the enumerator. For this reason (as well as the fact that 
            browser support is optional) clients should always be prepared to allow manual entry of ITEM ID 
            strings. In the case of 'hint' strings, there is no indication given as to whether the returned 
            string will be acceptable by AddItem or ValidateItem.
            </summary>
            <param name="filterType">IN: branch/leaf filter<br/>
            OPC_BRANCH - returns only items that have children<br/>
            OPC_LEAF - returns only items that don't have children<br/>
            OPC_FLAT - returns everything at and below this level including all children of children - 
            basically 'pretends' that the address space in actually FLAT<br/>
            This parameter is ignored for FLAT address space. </param>
            <param name="filterCriteria">A server specific filter string. 
            This is entirely free format and may be entered by the user via an EDIT field. 
            Although the valid criteria are vendor specific, source code for a recommended filter function 
            is included in an Apppendix at the end of this document. This particular filter function is 
            commonly used by OPC interfaces and is very similar in functionality to the LIKE function in 
            Visual Basic. A pointer to a NUL string indicates no filtering. </param>
            <param name="dataTypeFilter">Data type filter specified as a VarEnum VARIANT data type<br/>
            Filter the returned list based in the available datatypes (those that would succeed if passed to 
            AddItem). Type void indicates no filtering.</param>
            <param name="accessRightsFilter">Filter based on the AccessRights bit mask (OPC_READABLE or OPC_WRITEABLE). 
            The bits passed in the bitmask are 'ANDed' with the bits that would be returned for this Item by 
            AddItem, ValidateItem or EnumOPCItemAttributes. If the result is non-zero then the item is returned. 
            A 0 value in the bitmask indicates that the AccessRights bits should be ignored during the filtering 
            process.</param>
            <param name="stringEnumerator">OUT: string enumerator</param>
            <returns></returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.BrowseCurrentBranch(OPCDA.OPCBROWSETYPE,System.String,System.Type,OPCDA.OPCACCESSRIGHTS,System.Collections.ArrayList@)">
            <summary>
            DEPRECIATED. Use one of the BrowseOPCItemIDs overloads instead.<br/>
            ItemId browse method returning a string array instead of an enumerator.
            The OPC standard does not provide this method.
            </summary>
            <param name="filterType">IN: branch/leaf filter</param>
            <param name="NameFilter">IN: server specific filter string</param>
            <param name="sTypeFilter">IN: data type filter</param>
            <param name="accessRightsFilter">IN: access rights filter</param>
            <param name="NameArr">OUT: array with the browsed items</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.BrowseCurrentBranch(OPCDA.OPCBROWSETYPE,System.String,System.Runtime.InteropServices.VarEnum,OPCDA.OPCACCESSRIGHTS,System.Collections.ArrayList@)">
            <summary>
            DEPRECIATED. Use one of the BrowseOPCItemIDs overloads instead.<br/>
            ItemId browse method returning a string array instead of an enumerator.
            The OPC standard does not provide this method.
            </summary>
            <param name="filterType">IN: branch/leaf filter</param>
            <param name="NameFilter">IN: server specific filter string</param>
            <param name="dataTypeFilter">IN: data type filter</param>
            <param name="accessRightsFilter">IN: access rights filter</param>
            <param name="NameArr">OUT: array with the browsed items</param>
            <returns></returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.GetItemID(System.String)">
            <summary>
            Get the full item name of the specified name in the current branch. 
            (IOPCBrowseServerAddressSpace::GetItemID )
            If any error occurs an OPCException is thrown. 
            </summary>
            <param name="itemDataID">IN: Item id</param>
            <returns>fully qualified item name</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.GetItemID(System.String,System.String)">
            <summary>
            USED IN XDAGW-SS
            New  11-08-03 for DeltaV workaround
            Get the full item name of the specified name in the current branch. 
            (IOPCBrowseServerAddressSpace::GetItemID )
            If any error occurs an OPCException is thrown. 
            </summary>
            <param name="path">IN: Item path</param>
            <param name="itemDataID">IN: Item id</param>
            <returns>fully qualified item name</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.BrowseAccessPaths(System.String,System.Runtime.InteropServices.ComTypes.IEnumString@)">
            <summary>
            Provides a way to browse the available AccessPaths for an ITEM ID. 
            ( IOPCBrowseServerAddressSpace:: BrowseAccessPaths )<br/>
            Clients are allowed to get Access Path Enumerators for more than one item at a time. 
            Changing the browse position will not affect any enumerator the client already has. 
            AccessPath is the "how" for the server to get the data specified by the itemID (the what). 
            The client uses this function to identify the possible access paths for the specified itemID. 
            </summary>
            <param name="itemID">full item name</param>
            <param name="stringEnumerator">OUT:  string enumerator</param>
            <returns></returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.QueryAvailableProperties(System.String,OPCDA.NET.OPCItemProperty[]@)">
            <summary>
            Return a list of ID codes and descriptions for the available properties for 
            this ITEMID. This list may differ for different ItemIDs. This list is expected 
            to be relatively stable for a particular ItemID. That is, it could be affected 
            from time to time by changes to the underlying system's configuration. 
            ( IOPCItemProperties::QueryAvailableProperties )
            </summary>
            <param name="itemID">The ItemID for which the caller wants to know 
            the available properties</param>
            <param name="opcProperties"></param>
            <returns></returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.GetItemProperties(System.String,System.Int32[],OPCDA.NET.ItemPropertyData[]@)">
            <summary>
            Return a list of the current data values for the passed ID codes.
            ( IOPCItemProperties::GetItemProperties )<br/>
            NOTE: The paramters of this method differ from the OPC standard to 
            make it more convenient to use.
            </summary>
            <param name="itemID">IN: The ItemID for which the caller wants to read the list of properties</param>
            <param name="propertyIDs">IN: The number of properties passed</param>
            <param name="propertiesData">OUT: An array ItemPropertyData classes with 
            the current values and error information of the requested properties</param>
            <returns>HRESULT error/success code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.GetStandardProperties(System.String[],OPCDA.NET.StandardProperties[]@)">
            <summary>
            Read the OPC standard properties 1..6 for the specified items.
            This is a helper method that reads the items properties 1..6 using the OPC DA V2 GetItemProperties method. 
            The properties are returned in an object with the proper data type for each property value.
            </summary>
            <param name="itemIDs">Array with the fully qualified item names.</param>
            <param name="Properties">Array of objects with the property values</param>
            <returns>HRESULT error/success code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.LookupItemIDs(System.String,System.Int32[],OPCDA.NET.ItemPropertyItemID[]@)">
            <summary>
            Return a list of ITEMIDs (if available) for each of the passed ID codes. 
            These indicate the ITEMID which could be added to an OPCGroup and used for 
            more efficient access to the data corresponding to the Item Properties. 
            ( IOPCItemProperties::LookupItemIDs )
            NOTE: The paramters of this method differ from the OPC standard to 
            make it more convenient to use.
            </summary>
            <param name="itemID">IN: The ItemID for which the caller wants to lookup 
            the list of properties</param>
            <param name="propertyIDs">IN: array with DWORDIDs for the requested properties.
            These IDs were returned by QueryAvailableProperties	</param>
            <param name="propertyItems">OUT: array of ItemPropertyItemID classes containing the
            ItemIds and error information</param>
            <returns>HRESULT error/success code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.IsAvailableNT(System.Boolean@)">
            <summary>
            Query the current security configuration of the OPC server to determine if the current server configuration 
            provides OPC Security by NT credentials.
            </summary>
            <param name="available">TRUE: current configuration allows authorization using NT credentials, 
            FALSE: current configuration has authorization using NT credentials disabled</param>
            <returns>HRESULTS error/succes code as defined by OPC</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.QueryMinImpersonationLevel(System.Int32@)">
            <summary>
            Information method to help a client to determine the minimal impersonation level the server requires to gain 
            proper access to secured data sources.
            </summary>
            <param name="minImpLevel">Least required impersonation level for proper access: RPC_C_IMP_LEVEL_ANONYMOUS,
            RPC_C_IMP_LEVEL_IDENTIFY, RPC_C_IMP_LEVEL_IMPERSONATE, RPC_C_IMP_LEVEL_DELEGATE</param>
            <returns>HRESULTS error/succes code as defined by OPC</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.ChangeUser">
            <summary>
            Signal the server that the client has changed the user credentials of its proxy blanket.
            </summary>
            <returns>HRESULTS error/succes code as defined by OPC</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.IsAvailablePriv(System.Boolean@)">
            <summary>
            Query the current security configuration of the OPC server to determine if the current server 
            configuration provides OPC Security by private credentials.
            </summary>
            <param name="available">TRUE: current configuration allows authentication by private credentials, 
            FALSE: current configuration has authentication by private credentials</param>
            <returns>HRESULTS error/succes code as defined by OPC</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.Logon(System.String,System.String)">
            <summary>
            Changes the identity of the client application’s user. Future access to any security objects will be authorized 
            with the new user’s credentials until a subsequent call to Logoff() or Logon(). 
            For OPC Servers which also implement IOPCSecurityNT, access checking with NT credentials will be disabled until Logoff() is called.
            </summary>
            <param name="userID">The user’s logon name; for logons in NT domains this string contains also the domain name, e.g., “OPC\Ben”</param>
            <param name="password">The user’s password.</param>
            <returns>HRESULTS error/succes code as defined by OPC</returns>
        </member>
        <member name="M:OPCDA.NET.OpcServer.Logoff">
            <summary>
            Remove the private credential established by the previous call to Logon(). 
            OPC Security reverts to the state before the first call of Logon(), 
            there are no private credentials active for the client.
            </summary>
            <returns>HRESULTS error/succes code as defined by OPC</returns>
        </member>
        <member name="P:OPCDA.NET.OpcServer.ErrorsAsExecptions">
            <summary>
            The property determines the error handling. If TRUE then all errors throw an exception. 
            If false then most error are indicated in the HRESULT function value. 
            A few methods return a data result and always throw an exception on errors.
            </summary>
        </member>
        <member name="P:OPCDA.NET.OpcServer.DeclareV2">
            <summary>
            Forces the wrapper to use OPC DA V2 functions to emulate OPC DA V3 methods where supported.
            </summary>
        </member>
        <member name="P:OPCDA.NET.OpcServer.KeepAliveEmulationThreadInterval">
            <summary>
            Execution interval in milliseconds of the KeepAlive emulation thread.<br/>
            In each interval the thread makes a GetStatus server call and makes client callbacks as required for each activated group.
            The client has to call the OpcGroup.SetKeepAlive method for at least one group of an OPC DA V2 server 
            for the KeepAlive emulation to be started.
            </summary>
        </member>
        <member name="P:OPCDA.NET.OpcServer.Version">
            <summary>
            This static read-only property holds the OPCDA.NET version number 
            </summary>
        </member>
        <member name="P:OPCDA.NET.OpcServer.ServerName">
            <summary>
            This read-only property holds the name of the currently connected OPC server.
            </summary>
        </member>
        <member name="P:OPCDA.NET.OpcServer.HostInfo">
            <summary>
            This read-only property holds the access information of the currently connected OPC server.
            </summary>
        </member>
        <member name="P:OPCDA.NET.OpcServer.ConnectThroughNIOS">
            <summary>
            FALSE (default ): remote servers are connected so that no local server registration is needed. 
            The remote server has to be browsed to find the required information. 
            Some OPC V1 server do not register category information and may not browse correctly. 
            Such servers cannot be connected this way.<br/>
            TRUE: Remote servers are connected through the .Net COM Interop Services. 
            The server needs to be registered locally for this to work. 
            In-Process servers have to be connected this way.
            </summary>
        </member>
        <member name="P:OPCDA.NET.OpcServer.xiContextTimeout_ms">
            <summary>
            The XI server will destroy the context if there is no server access within the specified time.
            The default value is 0;
            The value has to be set before the server is connected. Changes afterward have no effect.
            </summary>
        </member>
        <member name="P:OPCDA.NET.OpcServer.xiContextKeepalive_ms">
            <summary>
            With a value != 0 the Xi wrapper will ensure that the time between XI server access is not
            longer than the specified time.
            </summary>
        </member>
        <member name="P:OPCDA.NET.OpcServer.isConnectedDA">
            <summary>
            Indicates if the OPC DA server is connected
            </summary>
        </member>
        <member name="E:OPCDA.NET.OpcServer.ShutdownRequested">
            <summary>
            ShutdownRequestEventHandler
            </summary>
        </member>
        <member name="T:OPCDA.NET.ShutdownRequestEventArgs">
            <summary>
            Shutdown request handler    IOPCShutdown::ShutdownRequest<br/>
            This method is provided by the client so that the server can request that 
            the client disconnect from the server. The client should UnAdvise all 
            connections, Remove all groups and release all interfaces. 
            </summary>
        </member>
        <member name="F:OPCDA.NET.ShutdownRequestEventArgs.shutdownReason">
            <summary>
            Reason for the shutdown request.
            </summary>
        </member>
        <member name="T:OPCDA.NET.ShutdownRequestEventHandler">
            <summary>
            Shutdown request handler    IOPCShutdown::ShutdownRequest<br/>
            This method is provided by the client so that the server can request that 
            the client disconnect from the server. The client should UnAdvise all 
            connections, Remove all groups and release all interfaces. 
            </summary>
        </member>
        <member name="T:OPCDA.NET.browseFilter">
            <summary>
            An enumeration specifying which subset of browse elements to return. 
            </summary>
        </member>
        <member name="T:OPCDA.NET.BrowseElement">
            <summary>
            BrowseElement class is returned from Browse<br/>
            The ItemID used in a Browse() call must be the value of ItemID returned with a browse element from a 
            previous call to browse or an empty string (used to indicate a top level browse).<br/>
            The ItemID is a fully qualified descriptor for the element that can be used for further browsing and 
            as an item id if IsItem is set. Note, that it is possible for a single element to be both an item and 
            have children (e.g. complex data items).
            </summary>
        </member>
        <member name="F:OPCDA.NET.BrowseElement.Name">
            <summary>
            Short user friendly portion of the namespace pointing to the element. 
            This is the string to be used for display purposes in a tree control.
            </summary>
        </member>
        <member name="F:OPCDA.NET.BrowseElement.ItemID">
            <summary>
            The unique identifier for this item that can be used with AddItems, Browse or GetProperties.
            </summary>
        </member>
        <member name="F:OPCDA.NET.BrowseElement.IsItem">
            <summary>
            Indicates that the element is an item that can be used to Read, Write, and Subscribe.
            If set and ItemID is a NULL string, then this element is a “hint” versus being a valid item.
            </summary>
        </member>
        <member name="F:OPCDA.NET.BrowseElement.HasChildren">
            <summary>
            Indicates that the returned element has children and can be used for a subsequent browse. 
            If it is too time consuming for a server to determine if an element has children, then this 
            value should be set TRUE so that the the client is given the opportunity to attempt to browse for 
            potential children.
            </summary>
        </member>
        <member name="F:OPCDA.NET.BrowseElement.Error">
            <summary>
            HRESULT error code.
            </summary>
        </member>
        <member name="F:OPCDA.NET.BrowseElement.Properties">
            <summary>
            The Item Properties associated with this item.
            </summary>
        </member>
        <member name="M:OPCDA.NET.BrowseElement.GetProperty(System.Int32)">
            <summary>
            Get the Property object for a given property id number.
            </summary>
            <param name="id">Property id number</param>
            <returns>Property object or null (Nothing) if id not found.</returns>
        </member>
        <member name="M:OPCDA.NET.BrowseElement.GetPropertyDatatype">
            <summary>
            Returns the value of property 1 converted to a .NET Type.
            Type Void is returned if the property 1 is not available.
            </summary>
            <returns>The canonical data type of the item as a .NET Type.</returns>
        </member>
        <member name="M:OPCDA.NET.BrowseElement.GetPropertyAccessRights">
            <summary>
            Returns the value of property 5 as an OPCACCESSRIGHTS enumerator.
            OPCACCESSRIGHTS.OPC_UNKNOWN is returned if the property 5 is not available.
            </summary>
            <returns>The item access rights</returns>
        </member>
        <member name="T:OPCDA.NET.OnBrowseFilter">
            <summary>
            Event handler method that is called before the OPC server BrowseItemIDs method is called to get the browse filters to be used.
            The application can specify filters that are appropriate for the current browse position.
            </summary>
            <param name="nameFilter">Name filter used in the the OPC server browse calls. The default is "" (no filtering).
            The string can contain wild card characters '*', '?'</param>
            <param name="accessFilter">Read/write access type filter.</param>
            <param name="typeFilter">Datratype filter. Specify typeof(void) for no filtering.</param>
        </member>
        <member name="T:OPCDA.NET.SyncIOGroup">
            <summary>
            Class with easy to use methods for synchronous read / write functions.<br/>
            Items can be accessed by their name without first creating a group. OPC DA V3 defines a similar
            function but the SyncIOGroup methods are implemented to work with V1,V2 and V3 servers.
            The class opens it's OPC group and adds items automatically at the first read or write function. 
            </summary>
        </member>
        <member name="M:OPCDA.NET.SyncIOGroup.#ctor(OPCDA.NET.OpcServer)">
            <summary>
            Constuctor creates the associated OPC group and the base of it's internal item collection.
            The OPCServer object reference is stored and used in the read/write methods.
            </summary>
            <param name="srv">IN: OPCServer object of the assiciated OPC server</param>
        </member>
        <member name="M:OPCDA.NET.SyncIOGroup.#ctor(OPCDA.NET.OpcServer,System.Int32)">
            <summary>
            Constuctor creates the associated OPC group and the base of it's internal item collection.
            The OPCServer object reference is stored for later use.
            </summary>
            <param name="srv">IN: OPCServer object of the owner server</param>
            <param name="Rate">IN: update rate in ms</param>
        </member>
        <member name="M:OPCDA.NET.SyncIOGroup.#ctor">
            <summary>
            private special constructor. Use  new SyncIOGroup( srv )
            </summary>
        </member>
        <member name="M:OPCDA.NET.SyncIOGroup.Add(System.String)">
            <summary>
            Add an item to the group. The item is also added to the associated 
            OPC group and the item characteristics are stored in the 
            ItemDef object OPCIIinfo
            This method is provided for the handling of special sitution and is not used in most applications. 
            The read/write function call it internally if the item is not yet added.
            </summary>
            <param name="name">IN: full OPC item name</param>
            <returns></returns>
        </member>
        <member name="M:OPCDA.NET.SyncIOGroup.Add(System.String,System.Int32@)">
            <summary>
            Add an item to the group. The item is also added to the associated 
            OPC group and the item characteristics are stored in the 
            ItemDef object OPCIIinfo
            This method is provided for the handling of special sitution and is not used in most applications. 
            The read/write function call it internally if the item is not yet added.
            </summary>
            <param name="name">IN: Full OPC item name</param>
            <param name="ClientHandle">OUT: Assigned client handle. 
            The OPC server returns the client handle in data change callbacks to identify the item.</param>
            <returns></returns>
        </member>
        <member name="M:OPCDA.NET.SyncIOGroup.GetItemsInGroup">
            <summary>
            Get the information about the items in the group.
            </summary>
            <returns>The items added to this group.</returns>
        </member>
        <member name="M:OPCDA.NET.SyncIOGroup.Read(OPCDA.OPCDATASOURCE,System.String,OPCDA.NET.OPCItemState@)">
            <summary>
            Read the current value of the specified item. <br/>
            The item is added to the group if it is not yet added.
            A synchronous OpcGroup read function is executed.
            </summary>
            <param name="src">IN: Cache ore Device</param>
            <param name="name">IN: Full OPC item name</param>
            <param name="val">OUT: Read item value with quality and timestamp</param>
            <returns></returns>
        </member>
        <member name="M:OPCDA.NET.SyncIOGroup.Read(OPCDA.OPCDATASOURCE,OPCDA.NET.ItemDef,OPCDA.NET.OPCItemState@)">
            <summary>
            Read the current value of the item specified with the ItemDef object. <br/>
            The ItemDef object was created in a previous Read or Add call. This method overload 
            is a bit more efficient because no ItemID search as to be done. Only in a SyncIOGroup with
            many items could be a significant performance gain.<br/>
            A synchronous OpcGroup read function is executed.
            </summary>
            <param name="src">IN: Cache or Device</param>
            <param name="idef">IN: Item definition object</param>
            <param name="val">OUT: Read item value with quality and timestamp</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.SyncIOGroup.Write(System.String,System.Object)">
            <summary>
            Write a new value to the specifed item.<br/>
            A synchronous OPC server write call is executed. 
            </summary>
            <param name="name">IN: Full OPC item name</param>
            <param name="val">IN: value to write</param>
            <returns></returns>
        </member>
        <member name="M:OPCDA.NET.SyncIOGroup.Write(OPCDA.NET.ItemDef,System.Object)">
            <summary>
            Write a value value to the item specified with the ItemDef object.<br/>
            The ItemDef object was created in a previous Write, Read or Add call. This method overload 
            is a bit more efficient because no ItemID search as to be done. Only in a SyncIOGroup with
            many items could be a significant performance gain.<br/>
            A synchronous OpcGroup write call is executed. 
            </summary>
            <param name="idef">IN: Item definition object</param>
            <param name="val">IN: value to write</param>
            <returns></returns>
        </member>
        <member name="M:OPCDA.NET.SyncIOGroup.Remove(System.String)">
            <summary>
            Remove one item from the SyncIOGroup object. The item is also removed from the 
            associated OPC group.
            </summary>
            <param name="name">full OPC item name</param>
        </member>
        <member name="M:OPCDA.NET.SyncIOGroup.FindClientHandle(System.Int32)">
            <summary>
            Return the item object for the item with the specified client handle.
            The method is typically used in the data changed callback handler.
            </summary>
            <param name="hnd">IN: Item client handle</param>
            <returns>ItemDef object of the item or null (Nothing) if not found.</returns>
        </member>
        <member name="M:OPCDA.NET.SyncIOGroup.Item(System.String)">
            <summary>
            Return the item object for the item with the specified name. 
            The name must be full path name.
            </summary>
            <param name="name">IN: full item name such as plant1.heater5.temp</param>
            <returns>ItemDef object of the item or null (Nothing) if not found.</returns>
        </member>
        <member name="M:OPCDA.NET.SyncIOGroup.GetErrorString(System.Int32)">
            <summary>
            Get the error text from the OPC server. ( IOPCServer::GetErrorString )<br/>
            This method is added for user convenience.
            </summary>
            <param name="err">IN: OPC error code</param>
            <returns>Error description in the current LocaleID</returns>
        </member>
        <member name="M:OPCDA.NET.SyncIOGroup.GetQualityString(System.Int16)">
            <summary>
            Convert the OPC item quality code into a text string. 
            The codes is defined in the enumerator OPC_QUALITY_STATUS.
            </summary>
            <param name="quality">IN: OPC quality code ( QQSSSSLL )</param>
            <returns>Item quality description</returns>
        </member>
        <member name="M:OPCDA.NET.SyncIOGroup.Dispose">
            <summary>
            Removes the OPC group and releases the internal item collection
            </summary>
        </member>
        <member name="P:OPCDA.NET.SyncIOGroup.OpcGrp">
            <summary>
            Associated OPC group object
            </summary>
        </member>
        <member name="P:OPCDA.NET.SyncIOGroup.ClientHandle">
            <summary>
            Group client handle
            </summary>
        </member>
        <member name="T:OPCDA.NET.RefreshEventReason">
            <summary>
            Reasons why the user event handler is called.
            </summary>
        </member>
        <member name="T:OPCDA.NET.RefreshEventArguments">
            <summary>
            Arguments passed to the user callback event handler.
            </summary>
        </member>
        <member name="F:OPCDA.NET.RefreshEventArguments.TransactionId">
            <summary>
            Transaction reference number specified in the read or write call. 
            Not used in DataChanged events.
            </summary>
        </member>
        <member name="F:OPCDA.NET.RefreshEventArguments.Reason">
            <summary>
            Enumerator indicating what caused the event.
            </summary>
        </member>
        <member name="F:OPCDA.NET.RefreshEventArguments.items">
            <summary>
            Array with ItemDef objects of the items involved in the event.
             The RefreshGroup event handler did update the data in this objects prior to calling the 
             user event handler.
            </summary>
        </member>
        <member name="T:OPCDA.NET.RefreshEventHandler">
            <summary>
            Delegate of the user data change callback handler.<br/>
            This callback handler is called from the RefrshGroup callback handler after the item data
            is stored in the RefreshGroup internal data chache.
            </summary>
        </member>
        <member name="T:OPCDA.NET.RefreshGroup">
            <summary>
            Class with easy to use methods for asynchronous read/write functions and data change callbacks.<br/>
            Items can be accessed by their name without first creating a group. 
            The items are added to the object internal data cache and to the associated OPC group.
            The object internal data cache is updated in the data changed callback handler and the application cna alwys read 
            current data from the cache. 
            The user can optionally install a user callback handler to get notified on value changes.
            The user callback handler is called after the internal cache is updated.
            </summary>
        </member>
        <member name="M:OPCDA.NET.RefreshGroup.#ctor(OPCDA.NET.OpcServer,System.Int32,OPCDA.NET.RefreshEventHandler)">
            <summary>
            Constuctor creates the associated OPC group and the base of the internal cache.
            The user specified call back handler is called from the internal datacallback
            and readcomplete event handlers.
            </summary>
            <param name="srv">IN: OPCServer object of the owner server.<br/>
            The server reference is stored and used in subsequent read/write calls.</param>
            <param name="Rate">IN: Refresh rate in ms</param>
            <param name="UserHnd">IN: Optional RefreshEventHandler for DataChanged, ReadComplete 
            and WriteComplete callbacks. Otherwise null (Nothing).</param>
        </member>
        <member name="M:OPCDA.NET.RefreshGroup.#ctor(OPCDA.NET.OpcServer,OPCDA.NET.RefreshEventHandler)">
            <summary>
            Constuctor creates the associated OPC group with an update rate of 500ms 
            and the base of the internal cache.
            The optional user specified call back handler is called from the internal datacallback
            and readcomplete event handlers.
            </summary>
            <param name="srv">IN: OPCServer object of the owner server.<br/>
            The server reference is stored and used in subsequent read/write calls.</param>
            <param name="UserHnd">IN: Optional RefreshEventHandler for DataChanged, ReadComplete 
            and WriteComplete callbacks. Otherwise null (Nothing)</param>
        </member>
        <member name="M:OPCDA.NET.RefreshGroup.#ctor(OPCDA.NET.OpcServer,OPCDA.NET.DataChangeEventHandler)">
            <summary>
            Constuctor creates the associated OPC group with an update rate of 500ms 
            and the base of the internal cache.<br/>
            The user specified callback handler is installed in place of the internal handler. 
            This disables the RefreshGroup cache update handling. The user handler has to do
            all required handling of the callback data.
            </summary>
            <param name="srv">IN: OPCServer object of the owner server.<br/>
            The server reference is stored and used in subsequent read/write calls.</param>
            <param name="dChgHnd">IN: call back handler delegate</param>
        </member>
        <member name="M:OPCDA.NET.RefreshGroup.#ctor(OPCDA.NET.OpcServer,OPCDA.NET.DataChangeEventHandler,System.Int32)">
            <summary>
            Constuctor creates the associated OPC group with the specified update rate  
            and the base of the internal cache.<br/>
            The user specified callback handler is installed in place of the internal handler. 
            This disables the RefreshGroup cache update handling. The user handler has to do
            all required handling of the callback data.
            </summary>
            <param name="srv">IN: OPCServer object of the owner server.<br/>
            The server reference is stored and used in subsequent read/write calls.</param>
            <param name="dChgHnd">IN: callback handler delegate</param>
            <param name="Rate">IN: Refresh rate in ms</param>
        </member>
        <member name="M:OPCDA.NET.RefreshGroup.Read(System.String,System.Int32)">
            <summary>
            Read the current value of one item. An asynchronous OpcGroup read call is executed. 
            The value is returned in the ReadComplete callback handler.<br/>
            This simplified Read overload does not return a cancel ID and therefore does not 
            allow the call to be cancelled.
            </summary>
            <param name="name">IN: Full OPC item name</param>
            <param name="TransactionId">This value is returned in the ReadComplete callback to allow 
            the value to be associated with the Read call.</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.RefreshGroup.Read(System.String,System.Int32,System.Int32@)">
            <summary>
            Read the current value of one item. An asynchronous OpcGroup read call is executed. 
            The value is returned in the ReadComplete callback handler.<br/>
            The returned cancel ID can be used to cancel the call execution.
            </summary>
            <param name="name">IN: Full OPC item name</param>
            <param name="TransactionId">This value is returned in the ReadComplete callback to allow 
            the value to be associated with the Read call.</param>
            <param name="CancelId">OUT: Cancel id code</param>
            <returns></returns>
        </member>
        <member name="M:OPCDA.NET.RefreshGroup.Read(OPCDA.NET.ItemDef,System.Int32)">
            <summary>
            Read the current value of the item specified by the ItemDef object. 
            An asynchronous OpcGroup read call is executed. 
            The value is returned in the ReadComplete callback handler.<br/>
            This simplified Read overload does not return a cancel ID and therefore does not 
            allow the call to be cancelled.
            </summary>
            <param name="idef">IN: ItemDef item definition object</param>
            <param name="TransactionId">This value is returned in the ReadComplete callback to allow 
            the value to be associated with the Read call.</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.RefreshGroup.Read(OPCDA.NET.ItemDef,System.Int32,System.Int32@)">
            <summary>
            Read the current value of the item specified by the ItemDef object. 
            An asynchronous OpcGroup read call is executed. 
            The value is returned in the ReadComplete callback handler.<br/>
            The returned cancel ID can be used to cancel the call execution.
            </summary>
            <param name="idef">IN: ItemDef item definition object</param>
            <param name="TransactionId">This value is returned in the ReadComplete callback to allow 
            the value to be associated with the Read call.</param>
            <param name="CancelId">OUT: Cancel id code</param>
            <returns></returns>
        </member>
        <member name="M:OPCDA.NET.RefreshGroup.Write(System.String,System.Object,System.Int32)">
            <summary>
            Write a new value to the specified item. An asynchronous OPC write call is executed. 
            The WriteComplete callback returns the indication of the successful execution or 
            error information if the write failed.<br/>
            This simplified Read overload does not return a cancel ID and therefore does not 
            allow the call to be cancelled.
            </summary>
            <param name="name">IN: Full OPC item name</param>
            <param name="val">IN: value to write</param>
            <param name="TransactionId">This value is returned in the WriteComplete callback to allow 
            the execution information to be associated with the Write call.</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.RefreshGroup.Write(System.String,System.Object,System.Int32,System.Int32@)">
            <summary>
            Write a new value to the specified item. An asynchronous OPC write call is executed. 
            The WriteComplete callback returns the indication of the successful execution or 
            error information if the write failed.<br/>
            The returned cancel ID can be used to cancel the call execution.
            </summary>
            <param name="name">IN: Full OPC item name</param>
            <param name="val">IN: value to write</param>
            <param name="TransactionId">This value is returned in the WriteComplete callback to allow 
            the execution information to be associated with the Write call.</param>
            <param name="CancelId">OUT: Cancel id code</param>
            <returns></returns>
        </member>
        <member name="M:OPCDA.NET.RefreshGroup.Write(OPCDA.NET.ItemDef,System.Object,System.Int32)">
            <summary>
            Write a new value to the item specified by the ItemDef object. 
            An asynchronous OPC write call is executed. 
            The WriteComplete callback returns the indication of the successful execution or 
            error information if the write failed.<br/>
            This simplified Read overload does not return a cancel ID and therefore does not 
            allow the call to be cancelled.
            </summary>
            <param name="idef">IN: ItemDef item definition object</param>
            <param name="val">IN: value to write</param>
            <param name="TransactionId">This value is returned in the WriteComplete callback to allow 
            the execution information to be associated with the Write call.</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.RefreshGroup.Write(OPCDA.NET.ItemDef,System.Object,System.Int32,System.Int32@)">
            <summary>
            Write a new value to the item specified by the ItemDef object. 
            An asynchronous OPC write call is executed. 
            The WriteComplete callback returns the indication of the successful execution or 
            error information if the write failed.<br/>
            The returned cancel ID can be used to cancel the call execution.
            </summary>
            <param name="idef">IN: ItemDef item definition object</param>
            <param name="val">IN: value to write</param>
            <param name="TransactionId">This value is returned in the WriteComplete callback to allow 
            the execution information to be associated with the Write call.</param>
            <param name="CancelId">OUT: Cancel id code</param>
            <returns></returns>
        </member>
        <member name="P:OPCDA.NET.RefreshGroup.UpdateRate">
            <summary>
            Update rate definition. This is the fasted rate of callbacks form the OPC server<br/>
            A get is from the OpcGroup property. To force a read of the update rate from the OPC server, 
            the method RefrGrp.OpcGrp.GetStat() has to be called to refresh the cache.<br/>
            On set the OPC server is updated. The server may set a revised value. 
            The actually set UpdateRate can be checked by reading this property.
            </summary>
        </member>
        <member name="M:OPCDA.NET.ItemCollection.Item(System.String)">
            <summary>
            Get the ItemDef object for the named item. The item must have been previously been added 
            to the SyncIOGroup either by Add() or by Read() or Write().
            Typically this method is used to access to the cached data of an item.
            </summary>
            <param name="name">Fully qualified ItemID.</param>
            <returns>ItemDef object or null (Nothing) if the item name is not found in the group.</returns>
        </member>
        <member name="M:OPCDA.NET.ItemCollection.FindClientHandle(System.Int32)">
            <summary>
            Get the ItemDef object for the client item handle. The item must have been previously been added 
            to the SyncIOGroup either by Add() or by Read() or Write().
            Typically this method is used in callback handler to access to the cached data of the item.
            </summary>
            <param name="Hnd">Client item handle that was internally created when the item was added to the group.</param>
            <returns>ItemDef object or null (Nothing) if the item name is not found in the group.</returns>
        </member>
        <member name="T:OPCDA.NET.BGServer">
            <summary>
            This class provides an interface to OpcServer class methods. 
            It is available in the OPCDA.NET Professional Edition only.<br/>
            The requests are queued and handled in a background thread in order to prevent the 
            application being blocked and being unresponsive due to long execution times or long timeouts 
            in case of COM or network issues.<br/>
            <br/>
            This class can only be used from classes that derive from either the System.Windows.Forms.Form
            or the WPF System.Windows.Window classes.
            The completion notification with the browse result is synchronized with the user interface 
            thread by internally calling BeginInvoke().<br/>
            <br/>
            Each server access is timeout checked. On timeout the GeneralError handler is called to inform 
            the user application. The server access thread may continue to wait for the server call to finish or timeout. 
            Further requests are not being handled before this happens. 
            </summary>
        </member>
        <member name="M:OPCDA.NET.BGServer.#ctor(System.Windows.Window)">
            <summary>
            The created object can only be used from classes that derive from WPF System.Windows.Window.
            The completion notification with the browse result is synchronized with the user interface 
            thread by internally calling Dispatcher.BeginInvoke().
            </summary>
            <param name="owner">The completion handlers call Dispatcher.BeginInvoke for this object.</param>
        </member>
        <member name="M:OPCDA.NET.BGServer.#ctor(System.Windows.Controls.Page)">
            <summary>
            For WPF Web Applications.
            The created object can only be used from classes that derive from WPF System.Windows.Controls.Page.
            The completion notification with the browse result is synchronized with the user interface 
            thread by internally calling Dispatcher.BeginInvoke().
            </summary>
            <param name="owner">The completion handlers call Dispatcher.BeginInvoke for this object.</param>
        </member>
        <member name="M:OPCDA.NET.BGServer.Dispose">
            <summary>
            The request handling thread is terminated. 
            If the server is connected then existing groups and DataBinds are disposed and the server is disconencted.
            This method must be called for the application to terminate properly.
            </summary>
        </member>
        <member name="F:OPCDA.NET.BGServer.Tag">
            <summary>
            Object for optional application specific data
            </summary>
        </member>
        <member name="M:OPCDA.NET.BGServer.Connect(System.String,System.Object,OPCDA.NET.OnBGSrvConnected)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            The specified local OPC DA server is connected. The server mus tbe connected before any other 
            request can be handled.
            </summary>
            <param name="progID">The server ProgID name such as e.g. Advosol.SIMDAServer.1"<br/>
            The proper names can be found by browsing the installed servers with a test client.</param>
            <param name="tag">This object is passed to the competion handler and allows the user to pass 
            any information that may be needed in the completion handler. null (nothing) can be specified if 
            the application does not require to pass any information.</param>
            <param name="onCompleted">Competion notification handler.
               void xxx( BGException ex, object tag ){}</param>
        </member>
        <member name="M:OPCDA.NET.BGServer.Connect(OPC.Common.Host,System.String,System.Object,OPCDA.NET.OnBGSrvConnected)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            The specified local OPC DA server is connected. The server mus tbe connected before any other 
            request can be handled.
            </summary>
            <param name="host">This argument specifies the network name of the machine with the OPC server 
            and optionally access credentials.<br/>
            null (Nothing) can be specified to indicate the local machine.</param>
            <param name="progID">The server ProgID name such as e.g. Advosol.SIMDAServer.1"<br/>
            The proper names can be found by browsing the installed servers with a test client.</param>
            <param name="tag">This object is passed to the competion handler and allows the user to pass 
            any information that may be needed in the completion handler. null (nothing) can be specified if 
            the application does not require to pass any information.</param>
            <param name="onCompleted">Competion notification handler.
               void xxx( BGException ex, object tag ){}</param>
        </member>
        <member name="M:OPCDA.NET.BGServer.Disconnect(System.Object,OPCDA.NET.OnBGSrvDisconnected)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            The OPC DA server associated with this BGServer instance is disconnected.
            Existing BGGroup and BGDataBind objects are disposed and the associated groups in the 
            server are removed for a proper server shutdown.
            </summary>
            <param name="tag">This object is passed to the competion handler and allows the user to pass 
            any information that may be needed in the completion handler. null (nothing) can be specified if 
            the application does not require to pass any information.</param>
            <param name="onCompleted">Competion notification handler.
               void xxx( BGException ex, object tag ){}</param>
        </member>
        <member name="M:OPCDA.NET.BGServer.GetStatus(System.Object,OPCDA.NET.OnBGSrvGetStatus)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            A GetStatus server call is executed. The status returned by the OPC server is returned to the user 
            as an argument of the completion handler.
            </summary>
            <param name="tag">This object is passed to the competion handler and allows the user to pass 
            any information that may be needed in the completion handler. null (nothing) can be specified if 
            the application does not require to pass any information.</param>
            <param name="onCompleted">Competion notification handler.
               void xxx( BGException ex, OPCDA.SERVERSTATUS stat, object tag ){}</param>
        </member>
        <member name="M:OPCDA.NET.BGServer.Browse(System.String,OPCDA.NET.browseFilter,System.String,System.String,System.Boolean,System.Boolean,System.Int32[],System.Object,OPCDA.NET.OnBGSrvBrowse)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            The specified branch is browsed with the specified filters. The browse result is returned to the user 
            as an argument of the completion handler.
            OPC DA V3 server are browsed using the OPC DA3 Browse() method. For OPC DA V2 servers the browse call
            is emulated by calling the available OPC DA2 browse handling methods.
            </summary>
            <param name="branch">The fully qualified name of the branch to be browsed. 
            Nothing (null) or an empty string identifies the root branch.</param>
            <param name="mode">Branches or Items or both can be included in the browse result.</param>
            <param name="elementFilter">Filter string for the branch/item names. Nothing (null), an empty string or "*" 
            includes all names. '*' matches any sequence of characters and '?' matches any single character.</param>
            <param name="vendorFilter">A vendor specific filter string that may be used by some OPC DA3 servers. 
            This is not supported by OPC DA2 servers.</param>
            <param name="returnProperties">If TRUE, all item properties are returned as part of the browse result.</param>
            <param name="returnValues">If TRUE, the item property information includes the current property values.</param>
            <param name="propertyIDs">This optional array of property ID values identifies the properties to be returned. 
            Nothing (null) indicates that no property information should be included in the browse result.
            This argument is ignored if returnProperties is TRUE. </param>
            <param name="tag">This object is passed to the competion handler and allows the user to pass 
            any information that may be needed in the completion handler. null (nothing) can be specified if 
            the application does not require to pass any information.</param>
            <param name="onCompleted">Competion notification handler.
                 void xxx( BGException ex, string branch, BrowseElement[] nodes, object tag ){}</param>
        </member>
        <member name="M:OPCDA.NET.BGServer.GetProperties(System.String[],System.Boolean,System.Int32[],System.Object,OPCDA.NET.OnBGSrvGetProperties)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            For the specified set of items the requested properties are read from the server. 
            The result is returned to the user as an argument of the completion handler.
            For OPC DA V3 servers the OPC DA3 GetProperties() method is used. For OPC DA V2 servers the call
            is emulated by calling the available OPC DA2 properties handling methods.
            </summary>
            <param name="items">An array of fuly qualified item ID names.</param>
            <param name="returnValues">If TRUE, the item property information includes the current property values.</param>
            <param name="propertyIDs">An array of property ID values identifies the properties to be returned. 
            Nothing (null) indicates that all item properties are to be returned.</param>
            <param name="tag">This object is passed to the competion handler and allows the user to pass 
            any information that may be needed in the completion handler. null (nothing) can be specified if 
            the application does not require to pass any information.</param>
            <param name="onCompleted">Competion notification handler.
               void xxx( BGException ex, ItemProperties[] props, object tag ){}</param>
        </member>
        <member name="M:OPCDA.NET.BGServer.AddGroup(System.String,System.Boolean,System.Int32,System.Int32,OPCDA.NET.DataChangeEventHandler,System.Object,OPCDA.NET.OnBGSrvAddGroup)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            A new BGGroup object is created and added to this BGServer instance. In the OPC DA server a group is added to 
            the associated server instance and the group is associated with the new BGGroup object.<br/>
            A BGGroup is required for data change handling and for read/write operations.
            </summary>
            <param name="groupName">The name identifies the group in the group list and enables the user to search the BGGroup object 
            by the name. The group is created in the server with this name. </param>
            <param name="active">The initial active state og the gorup. Data change callbacks occur only for active groups.
            Ifa group is to be used with read/write operations only then the state can be set to inactive in order to 
            prevent data changed callbacks. The handling of read/write operations is not influenced by the active state 
            of the group.</param>
            <param name="requestedUpdateRate">The fastest rate the server is allowed to make data changed callbacks. 
            The server may use a modified rate if the requested rate is outside of the server's allowed range.</param>
            <param name="clientHandle">This handle is returned in data change callbacks to allow the user to associate the 
            values with the proper item. It's only used if multiple groups use the same callback handler and the item 
            client handles are not unique over all groups. </param>
            <param name="DataChangedHandler">This method is called from the server on data changed events.
            The BGGroup intercepts the callback and synchronizes it with the user thread by calling BeginInvoke of the 
            of the Form object associated with the underlying BGServer object. <br/>
            Can be null (Nothing) if no callback handling is required.</param>
            <param name="tag">This object is passed to the competion handler and allows the user to pass 
            any information that may be needed in the completion handler. null (nothing) can be specified if 
            the application does not require to pass any information.</param>
            <param name="onCompleted">Competion notification handler.
               void xxx( BGException ex, BGGroup group, object tag ){}</param>
        </member>
        <member name="M:OPCDA.NET.BGServer.AddGroup(System.String,System.Boolean,System.Int32,System.Int32,System.Boolean,OPCDA.NET.DataChangeEventHandler,System.Object,OPCDA.NET.OnBGSrvAddGroup)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            A new BGGroup object is created and added to this BGServer instance. In the OPC DA server a group is added to 
            the associated server instance and the group is associated with the new BGGroup object.<br/>
            A BGGroup is required for data change handling and for read/write operations.
            </summary>
            <param name="groupName">The name identifies the group in the group list and enables the user to search the BGGroup object 
            by the name. The group is created in the server with this name. </param>
            <param name="active">The initial active state og the gorup. Data change callbacks occur only for active groups.
            Ifa group is to be used with read/write operations only then the state can be set to inactive in order to 
            prevent data changed callbacks. The handling of read/write operations is not influenced by the active state 
            of the group.</param>
            <param name="requestedUpdateRate">The fastest rate the server is allowed to make data changed callbacks. 
            The server may use a modified rate if the requested rate is outside of the server's allowed range.</param>
            <param name="clientHandle">This handle is returned in data change callbacks to allow the user to associate the 
            values with the proper item. It's only used if multiple groups use the same callback handler and the item 
            client handles are not unique over all groups. </param>
            <param name="doAdviseCallbacks">Determines if AdviseIOPCCallbacks is called to enbale the callback handling.</param> 
            <param name="DataChangedHandler">This method is called from the server on data changed events.
            The BGGroup intercepts the callback and synchronizes it with the user thread by calling BeginInvoke of the 
            of the Form object associated with the underlying BGServer object. <br/>
            Can be null (Nothing) if no callback handling is required.</param>
            <param name="tag">This object is passed to the competion handler and allows the user to pass 
            any information that may be needed in the completion handler. null (nothing) can be specified if 
            the application does not require to pass any information.</param>
            <param name="onCompleted">Competion notification handler.
               void xxx( BGException ex, BGGroup group, object tag ){}</param>
        </member>
        <member name="M:OPCDA.NET.BGServer.AddDataBind(System.String,System.Int32,System.Object,OPCDA.NET.OnBGSrvAddDataBind)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            A new BGDataBind object is created and added to this BGServer instance. <br/>
            A BGDataBind is required for the user to ba able to make OpcDataBind subscriptions.
            The difference to the OpcDataBind class is only in the handling of the Subscribe calls. 
            In the BGDataBind class these calls are queued and executed in a background thread in order 
            to prevent the application to be unresponsive for some possibly long timeout intervals.
            </summary>
            <param name="name">Name of the DataBind instance.</param>
            <param name="requestedUpdateRate">The fastest rate the server is allowed to make data changed callbacks. 
            The server may use a modified rate if the requested rate is outside of the server's allowed range.</param>
            <param name="tag">This object is passed to the competion handler and allows the user to pass 
            any information that may be needed in the completion handler. null (nothing) can be specified if 
            the application does not require to pass any information.</param>
            <param name="onCompleted">Competion notification handler.
               void xxx( BGException ex, BGDataBind dbind, object tag ){}</param>
        </member>
        <member name="E:OPCDA.NET.BGServer.GeneralError">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            This event handler is called when an error occurs and the user did not specify a completion 
            handler in the request. It is also called when a request handling timeout occurs. In this case it's
            called even with a user completion handler specified. The request completion handler will be called 
            when the request handling finally terminates. This may be after a much longer time limit.
            </summary>
        </member>
        <member name="E:OPCDA.NET.BGServer.GeneralErrorExt">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            Extended event handler including the BGServer object related to the event. 
            Install this handler if the application needs to determine the event source.<br/>
            This event handler is called when an error occurs and the user did not specify a completion 
            handler in the request. It is also called when a request handling timeout occurs. In this case it's
            called even with a user completion handler specified. The request completion handler will be called 
            when the request handling finally terminates. This may be after a much longer time limit.
            </summary>
        </member>
        <member name="P:OPCDA.NET.BGServer.IsConnected">
            <summary>
            Indicates if the OPC server associated with this BGServer instance is currently connected.
            </summary>
        </member>
        <member name="P:OPCDA.NET.BGServer.Name">
            <summary>
            Indicates the ProgID name of the OPC server associated with this BGServer instance.
            </summary>
        </member>
        <member name="P:OPCDA.NET.BGServer.DeclareV2">
            <summary>
            Forces the wrapper to use OPC DA V2 functions to emulate OPC DA V3 methods where supported.
            </summary>
        </member>
        <member name="P:OPCDA.NET.BGServer.OpcNetServer">
            <summary>
            Get the underlying OpcServer object. 
            </summary>
        </member>
        <member name="P:OPCDA.NET.BGServer.Groups">
            <summary>
            List of currently existing BGGroup instances for this BGServer instance.<br/>
            Instead of getting the BGGroup object from the AddGroup completion handler, the 
            object can be searched in this list by the group name.
            </summary>
        </member>
        <member name="P:OPCDA.NET.BGServer.DataBinds">
            <summary>
            List of currently existing BGDataBind instances for this BGServer instance.<br/>
            Instead of getting the BGDataBind object from the AddDataBind completion handler, the 
            object can be searched in this list by the DataBind name.
            </summary>
        </member>
        <member name="P:OPCDA.NET.BGServer.ServerCheckInterval">
            <summary>
            The OPC server connection is checked at this interval in milliseconds by executing a GetStatus call.
            The default interval is 10 seconds. The minimum is 1 sec.<br/>
            The GeneralError handler is called if the server does not respond or is not in 'running' state.
            </summary>
        </member>
        <member name="P:OPCDA.NET.BGServer.ServerResponseLimit">
            <summary>
            This is the time limit in milliseconds for the OPC server call handling. The default is 10 seconds.<br/>
            If the server call does not return within this time limit then the GeneralError handling method is 
            called with a TIMEOUT error indication.<br/>
            The server access thread may continue to wait for the server call to finish or timeout. Further requests 
            are not being handled before this happens. 
            </summary>
        </member>
        <member name="T:OPCDA.NET.BGGroup">
            <summary>
            <b>The BGGroup class handles the server access for data changed subscriptions and read/write operations.
            It's available in the OPCDA.NET Professional Edition only.<br/>
            The server access is executed in a background thread to prevent the user interface thread 
            becoming unresponsive while waiting for a server response.<br/>
            For data change callbacks to happen the BGGroup has to be in active state. Read an Write operations 
            are independent of the active state of the group.<br/>
            <br/>
            This class does not have a public constructor. Instances are created by calling the BGServer.AddGroup method.<br/>
            This class can only be used from classes that derive from System.Windows.Forms.Form.
            The completion notification with the results is synchronized with the user interface 
            thread by internally calling Form.BeginInvoke().<br/>
            <br/>
            Each server access is timeout checked. On timeout the BGServer GeneralError handler is called to inform 
            the user application. The server access thread may continue to wait for the server call to finish or timeout. 
            Further requests are not being handled before this happens.</b>
            </summary>
        </member>
        <member name="M:OPCDA.NET.BGGroup.Dispose">
            <summary>
            The request handling thread is terminated and the associated OpcGroup object is disposed.
            </summary>
        </member>
        <member name="M:OPCDA.NET.BGGroup.AddItems(OPCDA.NET.OPCItemDef[],System.Object,OPCDA.NET.OnBGGrpAddItems)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            A set of items is added to the group. If the group is in active state then the server makes a data change callback with 
            the current value and then each time the value of one or multiple items changes.<br/>
            Added items can also be used in read or write operations.<br/>
            For read and write operations the items don't necessarily be added first. If the item name is specified in the 
            read/write call and the item is not yet member of the group then it is added within the read/write handling.
            </summary>
            <param name="items">Array with the definitions of the items to be added.</param>
            <param name="tag">This object is passed to the competion handler and allows the user to pass 
            any information that may be needed in the completion handler. Nothing (null) can be specified if 
            the application does not require to pass any information.</param>
            <param name="onCompleted">Completion notification handler.
               void xxx( BGException ex, OPCItemResult[] rslt, int[] srvHandles, object tag ){}</param>
        </member>
        <member name="M:OPCDA.NET.BGGroup.Remove(System.Object,OPCDA.NET.OnBGGrpRemoved)">
            <summary>
            Remove this group.
            </summary>
            <param name="tag">This object is passed to the competion handler and allows the user to pass 
            any information that may be needed in the completion handler. Nothing (null) can be specified if 
            the application does not require to pass any information.</param>
            <param name="onCompleted">Completion notification handler.   void xxx(BGException ex, object tag)</param>
        </member>
        <member name="M:OPCDA.NET.BGGroup.RemoveItems(System.Int32[],System.Object,OPCDA.NET.OnBGGrpRemoveItems)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            The specified items are removed from the group in the OPC server. 
            </summary>
            <param name="srvHandles">Array of item server handles as they were returned in the AddItems call.</param>
            <param name="tag">This object is passed to the competion handler and allows the user to pass 
            any information that may be needed in the completion handler. Nothing (null) can be specified if 
            the application does not require to pass any information.</param>
            <param name="onCompleted">Completion notification handler.
               void xxx( BGException ex, int[] rslt, object tag ){}</param>
        </member>
        <member name="M:OPCDA.NET.BGGroup.Read(System.Int32[],System.Object,OPCDA.NET.OnBGGrpRead)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            Read a set of items with the items identified by the server handle that was returned in 
            a previous AddItems call.<br/>
            The item values are read by executing an asynchronous read and returned to the user as an 
            argument of the completion handler.
            </summary>
            <param name="serverHandles">Array of server handles as they were returned in previous AddItems calls.</param>
            <param name="tag">This object is passed to the competion handler and allows the user to pass 
            any information that may be needed in the completion handler. Nothing (null) can be specified if 
            the application does not require to pass any information.</param>
            <param name="onCompleted">Completion notification handler.
               void xxx( BGException ex, int[] requestErrors, OPCItemState[] rslt, object tag ){}</param>
        </member>
        <member name="M:OPCDA.NET.BGGroup.Read(OPCDA.NET.ItemIdentification[],System.Object,OPCDA.NET.OnBGGrpRead)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            Read a set of items with the items identified either by the fully qualified item ID or by the 
            server handle that was returned in a previous AddItems call.<br/>
            If an item is specified by the item id and it does not yet exist in the BGGroup internal list of 
            added items then the item is added by executin AddItems.<br/>
            The item values are read by executing an asynchronous read and returned to the user as an 
            argument of the completion handler.
            </summary>
            <param name="itemDefs">Array of item identifiers. 
            Each item may be identified by either:<br/>
            - the server handle that was returnd in a previous AddItems call.<br/>
            - the client handle that was specified as a unique value in a previous AddItems call.<br/>
            - the fully qualified item id. The item is searched in the BGGroup internal list of added items.
            If the item has not yet been added then it is added by executing an AddItems call.</param>
            <param name="tag">This object is passed to the competion handler and allows the user to pass 
            any information that may be needed in the completion handler. Nothing (null) can be specified if 
            the application does not require to pass any information.</param>
            <param name="onCompleted">Completion notification handler.
               void xxx( BGException ex, int[] requestErrors, OPCItemState[] rslt, object tag ){}</param>
        </member>
        <member name="M:OPCDA.NET.BGGroup.Write(OPCDA.NET.ItemValue[],System.Object,OPCDA.NET.OnBGGrpWrite)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            Write a set of items with the items identified either by the fully qualified item ID or by the 
            server handle that was returned in a previous AddItems call.<br/>
            If an item is specified by the item id and it does not yet exist in the BGGroup internal list of 
            added items then the item is added by executin AddItems.<br/>
            The item values are written by executing an asynchronous write call. The success of the write call 
            is reported for each item in argument of the completion handler. Error that happen in the write 
            request handlding are reported in the requestErrors array. For the items for which the server 
            accepted the write request the success of the actual write is reported in the OPCWriteResult argument.
            </summary>
            <param name="values">Array of objects with the item identifier and the value to be written. 
            Each item may be identified by either:<br/>
            - the server handle that was returnd in a previous AddItems call.<br/>
            - the client handle that was specified as a unique value in a previous AddItems call.<br/>
            - the fully qualified item id. The item is searched in the BGGroup internal list of added items.
            If the item has not yet been added then it is added by executing an AddItems call.</param>
            <param name="tag">This object is passed to the competion handler and allows the user to pass 
            any information that may be needed in the completion handler. Nothing (null) can be specified if 
            the application does not require to pass any information.</param>
            <param name="onCompleted">Completion notification handler.
               void xxx( BGException ex, int[] requestErrors, OPCWriteResult[] rslt, object tag ){}</param>
        </member>
        <member name="M:OPCDA.NET.BGGroup.WriteVQT(OPCDA.NET.ItemValue[],System.Object,OPCDA.NET.OnBGGrpWrite)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            WriteVQT sets the item value, quality and timestamp. This method is supported by oPD DA V3 servers only.
            The items are identified either by the fully qualified item ID or by the 
            server handle that was returned in a previous AddItems call.<br/>
            If an item is specified by the item id and it does not yet exist in the BGGroup internal list of 
            added items then the item is added by executin AddItems.<br/>
            The item values are written by executing an asynchronous WriteVQT call. The success of the WriteVQT call 
            is reported for each item in argument of the completion handler. Error that happen in the WriteVQT 
            request handlding are reported in the requestErrors array. For the items for which the server 
            accepted the WriteVQT request the success of the actual WriteVQT is reported in the OPCWriteVQTResult argument.
            </summary>
            <param name="values">Array of objects with the item identifier and the value to be written. 
            Each item may be identified by either:<br/>
            - the server handle that was returnd in a previous AddItems call.<br/>
            - the client handle that was specified as a unique value in a previous AddItems call.<br/>
            - the fully qualified item id. The item is searched in the BGGroup internal list of added items.
            If the item has not yet been added then it is added by executing an AddItems call.</param>
            <param name="tag">This object is passed to the competion handler and allows the user to pass 
            any information that may be needed in the completion handler. Nothing (null) can be specified if 
            the application does not require to pass any information.</param>
            <param name="onCompleted">Completion notification handler.
               void xxx( BGException ex, int[] requestErrors, OPCWriteResult[] rslt, object tag ){}</param>
        </member>
        <member name="M:OPCDA.NET.BGGroup.Refresh(OPCDA.OPCDATASOURCE)">
            <summary>
            Available in the OPCDA.NET Professional Edition only.<br/>
            Force a callback to DataChangeEventHandler() for all active items in the group (whether they
            have changed or not). Inactive items are not included in the callback.
            If the call fails then a BGException is thrown and no Callback will occur.
            Calling Refresh for an InActive Group will fail with E_FAIL. Calling refresh for an Active Group,
            where all the items in the group are InActive also fails the call with E_FAIL.
            Functionally this method is similar to what could be achieved by doing a READ of all of the active items in a group.
            NOTE: all of the results must be returned in a single callback. Thus if the items in the group require
            multiple physical transactions to one or more physical devices then the server must wait until all of
            them are complete before invoking OnDataChange.
            The expected behavior is that this Refresh will not affect the timing of normal OnDataChange
            callbacks which are based on the UpdateRate. For example, if the update rate is 1 hour and this
            method is called after 45 minutes then the server should still do its internal ‘checking’ at the end of the
            hour (15 minutes after the Refresh call). Calling this method may affect the contents of that next
            callback (15 minutes later) since only items where the value or status changed during that 15 minutes
            would be included. Items which had changed during the 45 minutes preceding the Refresh will be sent
            (along with all other values) as part of the Refresh Transaction. They would not be sent a second time
            at the end of the hour. The value sent in response to the Refresh becomes the ‘last value sent’ to the
            client when performing the normal subscription logic.
            </summary>
            <param name="source">Data source CACHE or DEVICE. If the DEVICE, then all active items in the CACHE are 
            refreshed from the device BEFORE the callback.</param>
        </member>
        <member name="P:OPCDA.NET.BGGroup.OpcNetGroup">
            <summary>
            Get the underlying OpcGroup object. 
            </summary>
        </member>
        <member name="P:OPCDA.NET.BGGroup.Name">
            <summary>
            OpcGroup name property assignement.<br/>
            A get is from the OpcGroup property. Use OpcGrp.GetStat() to refresh the
            properties if this may be necessary. On set the OPC server is updated.
            Errors are reported in the GeneralErrors event.
            </summary>
        </member>
        <member name="P:OPCDA.NET.BGGroup.Active">
            <summary>
            OpcGroup Active state property assignement.<br/>
            A get is from the 'Active' property of the underlying OpcdataBind object. 
            On set the associated OPC server group is modified.
            Errors are reported in the GeneralErrors event.
            </summary>
        </member>
        <member name="P:OPCDA.NET.BGGroup.UpdateRate">
            <summary>
            OpcGroup UpdateRate property assignement.<br/>
            A get is from the OpcGroup property. Use OpcGrp.GetStat() to refresh the
            properties if this may be necessary. On set the OPC server is updated.
            Errors are reported in the GeneralErrors event.
            </summary>
        </member>
        <member name="P:OPCDA.NET.BGGroup.TimeBias">
            <summary>
            OpcGroup TimeBias property assignement.<br/>
            A get is from the OpcGroup property. Use OpcGrp.GetStat() to refresh the
            properties if this may be necessary. On set the OPC server is updated.
            Errors are reported in the GeneralErrors event.
            </summary>
        </member>
        <member name="P:OPCDA.NET.BGGroup.PercentDeadband">
            <summary>
            OpcGroup PercentDeadband property assignement.<br/>
            A get is from the OpcGroup property. Use OpcGrp.GetStat() to refresh the
            properties if this may be necessary. On set the OPC server is updated.
            Errors are reported in the GeneralErrors event.
            </summary>
        </member>
        <member name="P:OPCDA.NET.BGGroup.LocaleID">
            <summary>
            OpcGroup LocaleID property assignement.<br/>
            A get is from the OpcGroup property. Use OpcGrp.GetStat() to refresh the
            properties if this may be necessary. On set the OPC server is updated.
            Errors are reported in the GeneralErrors event.
            </summary>
        </member>
        <member name="P:OPCDA.NET.BGGroup.HandleClient">
            <summary>
            OpcGroup Client Handle property assignement.<br/>
            A get is from the OpcGroup property. Use OpcGrp.GetStat() to refresh the
            properties if this may be necessary. On set the OPC server is updated.
            Errors are reported in the GeneralErrors event.
            </summary>
        </member>
        <member name="P:OPCDA.NET.BGGroup.KeepAliveRate">
            <summary>
            OpcGroup KeepAlive feature of OPC DA V3 servers.<br/>
            A get returns the revised rate of the last set call.
            On set the OPC server is updated. 
            A value of 0 disables or indicates a disabled KeepAlive handling. 
            Errors are reported in the GeneralErrors event.
            </summary>
        </member>
        <member name="T:OPCDA.NET.BrowseNodeInfo">
            <summary>
            BGBrowseTree helper class with information about the node.
            </summary>
        </member>
        <member name="T:OPCDA.NET.BGException">
            <summary>
            Exception uses in the BGxxx and DAxxx classes. The HRESULTS error code is accessible.
            </summary>
        </member>
        <member name="M:OPCDA.NET.BGException.#ctor(System.Int32)">
            <summary>
            Throws an exception of type BGException with the HRESULT error code only
            </summary>
            <param name="rtc">HRESULTS error code</param>
        </member>
        <member name="M:OPCDA.NET.BGException.#ctor(System.Int32,System.String)">
            <summary>
            Throws an exception of type BGException with the HRESULT error code and error message
            </summary>
            <param name="rtc">HRESULTS error code</param>
        </member>
        <member name="M:OPCDA.NET.BGException.#ctor(System.Int32,System.String,System.Exception)">
            <summary>
            Throws an exception of type BGException with the HRESULT error code, error message and inner exception
            </summary>
            <param name="rtc">HRESULTS error code</param>
            <param name="emsg">Exception message</param>
            <param name="iex">Inner exception</param>
        </member>
        <member name="P:OPCDA.NET.BGException.Result">
            <summary>
            OPC error code.
            </summary>
        </member>
        <member name="P:OPCDA.NET.BGException.Message">
            <summary>
            Message with error information.
            </summary>
        </member>
        <member name="P:OPCDA.NET.BGException.InnerException">
            <summary>
            Inner exception
            </summary>
        </member>
        <member name="T:OPCDA.NET.OpcGroup">
            <summary>
            <b>The OpcGroup class contains the methods defined in the OPC DA group interface.<br/>
            The user does not need to construct OpcGroup objects. This is done internally in the
            OpcServer.AddGroup method.<br/>
            After the group is created the user needs to add a set of items to the group using the function AddItems. 
            After that the added items can be accessed using the synchronous or asynchronous read / write 
            functions of the group object.</b>
            </summary>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.#ctor(OPCDA.NET.OpcServer,System.String,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Constructor. Used internally from the AddGroup method in OpcServer object<br/>
            Initializes the class but does not add the group in the OPC server.
            </summary>
            <param name="srvObj">OPC server object</param>
            <param name="groupName">name of group</param>
            <param name="setActive">initial active state</param>
            <param name="requestedUpdateRate">update rate in ms</param>
            <param name="ClientHandle">client handle</param>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.AddItems(OPCDA.NET.OPCItemDef[],OPCDA.NET.OPCItemResult[]@)">
            <summary>
            Add a set of items to the group.  ( IOPCItemMgt::AddItems )
            It is acceptable to add the same item to the group more than once. 
            This will generate a 2nd item with a unique ServerHandle. 
            Any FAILED code in ppErrors indicates that the corresponding item was NOT added to the group and 
            that the corresponding OPCITEMRESULT will not contain useful information.
            As an alternative to OPC_E_BADTPYE it is acceptable for the server to return any FAILED error 
            returned by VariantChangeType or VariantChangeTypeEx. 
            The server provided item handle will be unique within the group, but may not be unique across groups. 
            The server is allowed to 'reuse' the handles of deleted items.
            Items cannot be added to public groups. The client needs to free all of the memory associated 
            with the OPCITEMRESULTs including the BLOB. 
            If the server supports the BLOB it will return an updated BLOB in the OPCITEMRESULTs. 
            This BLOB may differ in both content and size from the one passed by the client in OPCITEMDEF. <br/>
            Note that if an Advise is active, the client will begin receiving callbacks for active items. 
            This can occur very quickly, perhaps even before the client has time to process the returned results.
            The client must be designed to deal with this. One simple solution is for the client to clear 
            the Active state of the group while doing AddItems and to restore it after the AddItems is completed 
            and the results are processed. 
            </summary>
            <param name="arrDef">IN: Array of item definitions. Item access characteristics sucha as the 
            requested data type can be specified.</param>
            <param name="aRslt">Returns the server item handles that are used in read/write calls to reference
            the item.<br/>
            The result structure differs from the OPC specification and 
            additionaly contains the error code. OPC has it in a separate array.</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.ValidateItems(OPCDA.NET.OPCItemDef[],OPCDA.NET.OPCItemResult[]@)">
            <summary>
            validate a set of items.  ( IOPCItemMgt::ValidateItems )<br/>
            Determines if an item is valid (could it be added without error). Also returns information about 
            the item such as canonical datatype. Does not affect the group in any way.
            </summary>
            <param name="arrDef">IN: Array of item definitions. Item access characteristics sucha as the 
            requested data type can be specified.</param>
            <param name="aRslt">Returns the server item handles that are used in read/write calls to reference
            the item.<br/>
            The result structure differs from the OPC specification and 
            additionaly contains the error code. OPC has it in a separate array.</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.RemoveItems(System.Int32[],System.Int32[]@)">
            <summary>
            Remove a set of items from the group.  ( IOPCItemMgt::RemoveItems )
            </summary>
            <param name="arrHSrv">IN: Array with the server handles of the items to be removed</param>
            <param name="arrErr"></param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.Read(OPCDA.OPCDATASOURCE,System.Int32[],OPCDA.NET.OPCItemState[]@)">
            <summary>
            Read the value, quality and timestamp information for one or more items in a 
            group. The function runs to completion before returning.( IOPCSyncIO::Read )
            </summary>
            <param name="src">IN: The 'data source': OPC_DS_CACHE or OPC_DS_DEVICE</param>
            <param name="aSrvHnd">IN: The list of server item handles for the items to be read</param>
            <param name="aResult">Array of structures in which the item values are returned. 
            It also contains the error code which OPC specifies in a separate array.</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.Write(System.Int32[],System.Object[],System.Int32[]@)">
            <summary>
            Writes values to one or more items in a group. The function runs to completion. 
            The values are written to the DEVICE. That is, the function should not return 
            until it verifies that the device has actually accepted (or rejected) the data. 
            ( IOPCSyncIO::Write )
            </summary>
            <param name="arrHSrv">The array of server item handles for the items to be read </param>
            <param name="arrVal"> List of values to be written to the items. The datatypes 
            of the values do not need to match the datatypes of the target items. 
            However an error will be returned if a conversion cannot be done. 
            null values are not allowed. If any element of the arrVal array is null the call fails 
            with error E_INVALIDARG.</param>
            <param name="arrErr">If the call is generally successful a HRESULTS error/success 
            code is returnd for each item. If the call fails with an error code then this array 
            is undefined.</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.ReadMaxAge(OPCDA.NET.ItemValue[])">
            <summary>
            Reads one or more values, qualities and timestamps for the items specified. This is functionally similar
            to the OPCSyncIO::Read method except it is asynchronous and no source is specified (DEVICE or
            CACHE). The server will make the determination as whether the information will be obtained from
            the device or cache. This decision will be based upon the MaxAge parameter. If the information in
            the cache is within the MaxAge, then the data will be obtained from the cache, otherwise the server
            must access the device for the requested information.
            </summary>
            <param name="items">Holds the server handle as the item identifier on entry and the read 
            value/quality/timestamp or error on return.</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.WriteVQT(OPCDA.NET.ItemValue[])">
            <summary>
            Writes one or more values, qualities and timestamps for the items specified. 
            ( Available only in OPC DA V3 servers )<br/>
            This method is functionally similar to the OpcGroup.Write except that Quality and Timestamp may 
            be written. If a client attempts to write VQ, VT, or VQT it should expect that the server will 
            write them all or none at all.
            </summary>
            <param name="items">An array of ItemValue objects with the value, quality and timestamp for each item.</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.ReadMaxAge(System.Int32[],System.Int32[],System.Int32,System.Int32@,System.Int32[]@)">
            <summary>
            Asynchronously reads values, qualities and timestamps for the items specified.
            ( Available only in OPC DA V3 servers )<br/>
            This method is functionally similar to the OpcGroup.Read method except it is asynchronous and no 
            source is specified (DEVICE or CACHE). The server will make the determination as whether the 
            information will be obtained from the device or cache. This decision will be based upon the MaxAge 
            parameter. If the information in the cache is within the MaxAge, then the data will be obtained from 
            the cache, otherwise the server must access the device for the requested information.
            </summary>
            <param name="srvHnd">Array of server item handles of the items to be read</param>
            <param name="maxAge">An array of “staleness” for each item, requested in milliseconds. 
            The server will calculate, for each requested item, the number of milliseconds between “now” and 
            the timestamp on each item. For each item that has not been updated within the last MaxAge 
            milliseconds, the item must be obtained from the underlying device. Or if the item is not available 
            from the cache, it will also need to be obtained from the underlying device. A max age of 0 is 
            equivalent to OPC_DS_DEVICE and a max age of 0xFFFFFFFF is equivalent to OPC_DS_CACHE. Without 
            existence of a cache the server will always read from device. In this case MaxAge is not relevant. 
            Clients should not expect that a cache exists, if they have not activated both the item and the 
            containing group. Some servers maintain a global cache for all clients. If the needed item is in 
            this global cache, it is expected that the server makes use of it to check the MaxAge value. 
            Servers should not automatically create or change the caching of an item based on a Read call with 
            MaxAge. (Note: Since this is a DWORD of milliseconds, the largest MaxAge value would be 
            approximately is 49.7 days).</param>
            <param name="transactionID">The Client generated transaction ID. 
            This is included in the 'completion' information provided to the OnReadComplete.</param>
            <param name="cancelID">Place to return a Server generated ID to be used in case the operation 
            needs to be canceled.</param>
            <param name="errors"></param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.WriteVQT(OPCDA.NET.ItemValue[],System.Int32,System.Int32@)">
            <summary>
            Asynchronously writes values, qualities and timestamps for the items specified.<br/>
            This method is functionally similar to the OpcGroup.Write except that Quality and Timestamp may be 
            written. If a client attempts to write VQ, VT, or VQT it should expect that the server will write 
            them all or none at all.
            </summary>
            <param name="items">IN: An array of ItemValue objects with the value, quality and timestamp for 
            each item.<br/>
            OUT: The Error element contains the error item code returned by the server.</param>
            <param name="transactionID">The Client generated transaction ID. This is included in the 
            'completion' information provided to the OnWriteComplete.</param>
            <param name="cancelID">Place to return a Server generated ID to be used in case the operation 
            needs to be canceled.</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.RefreshMaxAge(System.Int32,System.Int32,System.Int32@)">
             <summary>
            Force a callback to IOPCDataCallback::OnDataChange for all active items in the group (whether they
            have changed or not). Inactive items are not included in the callback. The MaxAge value will
            determine where the data is obtained. There will be only one MaxAge value, which will determine the
            MaxAge for all active items in the group. This means some of the values may be obtained from cache
            while others could be obtained from the device depending on the “freshness” of the data in the cache. 
             </summary>
             <param name="maxAge">“staleness” for the items, requested in milliseconds. The server will calculate 
             the number of milliseconds between “now” and the item timestamp. If the item that has not been 
             updated within the last MaxAge milliseconds, the value must be obtained from the underlying device. 
             Or if the item is not available from the cache, it will also need to be obtained from the underlying 
             device. A max age of 0 is equivalent to OPC_DS_DEVICE and a max age of 0xFFFFFFFF is equivalent to 
             OPC_DS_CACHE. Without existence of a cache the server will always read from device. In this case 
             MaxAge is not relevant. Some servers maintain a global cache for all clients. If the needed item is 
             in this global cache, it is expected that the server makes use of it to check the MaxAge value. 
             Servers should not automatically create or change the caching of an item based on a Read call with 
             MaxAge. </param>
             <param name="transactionID">The Client generated transaction ID. This is included in the 'completion' 
             information provided to the OnDataChange</param>
             <param name="cancelID">Place to return a Server generated ID to be used in case the operation needs 
             to be canceled.</param>
             <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.Read(System.Int32[],System.Int32,System.Int32@,System.Int32[]@)">
            <summary>
            Read one or more items in a group. The results are returned via the client's 
            IOPCcallback connection established through the server's IConnectionPointContainer. 
            Reads are from 'DEVICE' and are not affected by the ACTIVE state of the group 
            or item. ( IOPCAsyncIO2::Read )
            </summary>
            <param name="arrHSrv">Array of server item handles of the items to be read</param>
            <param name="transactionID">The Client generated transaction ID. This is included in 
            the 'completion' information provided to the OnReadComplete.</param>
            <param name="cancelID">Place to return a Server generated ID to be used in case the operation needs to be canceled.</param>
            <param name="arrErr"></param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.Write(System.Int32[],System.Object[],System.Int32,System.Int32@,System.Int32[]@)">
            <summary>
            Write one or more items in a group. The results are returned via the client's 
            IOPCDataCallback connection established through the server's 
            IConnectionPointContainer. ( IOPCAsyncIO2::Write )
            </summary>
            <param name="arrHSrv">IN: List of server items handles for the items to be written</param>
            <param name="arrVal">IN: List of values to be written. The value data types do not 
            match the requested or canonical item datatype but must be 'convertible' to the 
            canonical type. </param>
            <param name="transactionID">IN: The Client generated transaction ID. This is included 
            in the 'completion' information provided to the OnWriteComplete.</param>
            <param name="cancelID">OUT: Place to return a Server generated ID to be used in case 
            the operation needs to be canceled.</param>
            <param name="arrErr">OUT: Array of errors for each item (See OPC spec)</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.Refresh2(OPCDA.OPCDATASOURCE,System.Int32,System.Int32@)">
            <summary>
            Force a callback to IOPCDataCallback::OnDataChange for all active items in the 
            group (whether they have changed or not). Inactive items are not included in 
            the callback. ( IOPCAsyncIO2::Refresh2 )
            </summary>
            <param name="sourceMode">IN: Data source CACHE or DEVICE. If the DEVICE, then 
            all active items in the CACHE are refreshed from the device BEFORE the callback</param>
            <param name="transactionID">IN: The Client generated transaction ID. This is 
            included in the 'completion' information provided to the OnDataChange.</param>
            <param name="cancelID">Place to return a Server generated ID to be used in 
            case the operation needs to be canceled.</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.Cancel2(System.Int32)">
            <summary>
            Request that the server cancel an outstanding transaction.  ( IOPCAsyncIO2::Cancel2 )
            </summary>
            <param name="cancelID">The Server generated Cancel ID which was associated with 
            the operation when it was initiated.</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.SetEnable(System.Boolean)">
            <summary>
            Controls the operation of OnDataChange. Basically setting Enable to FALSE 
            will disable any OnDataChange callbacks with a transaction ID of 0 
            (those which are not the result of a Refresh). ( IOPCAsyncIO2::SetEnable ) 
            </summary>
            <param name="doEnable">TRUE enables OnDataChange callbacks, FALSE disables 
            OnDataChange callbacks.</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.GetEnable(System.Boolean@)">
            <summary>
            Retrieves the last Callback Enable value set with SetEnable.
             ( IOPCAsyncIO2::GetEnable )
            </summary>
            <param name="isEnabled">OUT: Where to save the returned result.</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.Remove(System.Boolean)">
            <summary>
            Remove the associated OPC group and release all interfaces.<br/>
            Existing callbacks are UnAdvised and then the server function IOPCServer::RemoveGroup is called.
            </summary>
            <param name="bForce">The bForce flag is supported only for backwards compatibility. 
            It is very strongly recommended that client software avoid use of this flag. </param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.SetName(System.String)">
            <summary>
            Change the name of the OPC group.  ( IOPCGroupStateMgt::SetName )<br/>
            The name must be unique. The name cannot be changed for public groups.
            </summary>
            <param name="newName"></param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.CloneGroup(System.String,System.Guid@,System.Object@)">
            <summary>
            Clone a group.<br/>
            There is rarely a good reason to use this method.
            </summary>
            <param name="Name">Name of the group. The name must be unique among the other groups 
            created by this client. If no name is provided (szName is a pointer to a NULL string) 
            the server will generate a unique name. The server generated name will also be unique 
            relative to any existing public groups.</param>
            <param name="riid">requested interface type.</param>
            <param name="ppUnk">place to return interface pointer. NULL is returned for any 
            HRESULT other than S_OK </param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.GetState">
            <summary>
            Updates the member variables in the OpcGroup object with the current state of the OPC 
            group by calling IOPCGroupStateMgt::GetState.<br/>
            The status information can then be accessed using the OpcGroup property accessors. 
            </summary>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.GetState(System.Int32@,System.Boolean@,System.String@,System.Int32@,System.Single@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Updates the member variables in the OpcGroup object with the current state of the OPC 
            group by calling IOPCGroupStateMgt::GetState and returns the state information to the caller.
            </summary>
            <param name="updateRate">The current update rate. The Update Rate is in milliseconds </param>
            <param name="active">The current active state of the group.</param>
            <param name="name">The current name of the group </param>
            <param name="timeBias">The TimeZone Bias of the group (in minutes).</param>
            <param name="percentDeadband">The percent change in an item value that will cause an exception 
            report of that value to a client. This parameter only applies to items in the group that have 
            dwEUType of Analog.</param>
            <param name="localeID">The current LCID for the group.</param>
            <param name="handleClient">The client supplied group handle </param>
            <param name="handleServer">The server generated group handle </param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.SetActiveState(System.Int32[],System.Boolean,System.Int32[]@)">
            <summary>
            Sets one or more items in a group to active or inactive. This controls whether 
            or not valid data can be obtained from Read CACHE for those items and whether 
            or not they are included in the IAdvise subscription to the group. 
            ( IOPCItemMgt::SetActiveState )
            </summary>
            <param name="arrHSrv">IN: Array with item server handles</param>
            <param name="activate">IN: new activ state</param>
            <param name="arrErr"></param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.SetClientHandles(System.Int32[],System.Int32[],System.Int32[]@)">
            <summary>
            Changes the client handle for one or more items in a group.  IOPCItemMgt::SetClientHandles )
            </summary>
            <param name="arrHSrv">Array of Server items handles.</param>
            <param name="arrHClt">Array of new Client item handles to be stored. The Client 
            handles do not need to be unique.</param>
            <param name="arrErr"></param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.SetDatatypes(System.Int32[],System.Type[],System.Int32[]@)">
            <summary>
            Changes the requested data type for one or more items in a group.
            </summary>
            <param name="arrHSrv">Array of Server items handles. </param>
            <param name="arrST">Array of new Requested Datatypes to be stored</param>
            <param name="arrErr"></param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.SetDatatypes(System.Int32[],System.Runtime.InteropServices.VarEnum[],System.Int32[]@)">
            <summary>
            Changes the requested data type for one or more items in a group.
            </summary>
            <param name="arrHSrv">Array of Server items handles. </param>
            <param name="arrST">Array of new Requested Datatypes to be stored</param>
            <param name="arrErr"></param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.SetState(OPCDA.NET.SetStateArgs@)">
            <summary>
            The client can set various states of the group. 
            The "defined" flag has to be set in the argument object for each state the client wants to change.<br/>
            Group states can be changed by calling this method or alternatively individually by assigning 
            the corresponding OpcGroup property.
            </summary>
            <param name="grpStates">Object with all states to be changed.</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.GetItemAttributes(OPCDA.NET.OPCItemAttributes[]@)">
            <summary>
            Get the attibutes of all items in the group.
            </summary>
            <param name="attributes">Array of objects with the attribute data of an item.</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.GetKeepAlive(System.Int32@)">
            <summary>
            Returns the currently active keep-alive time for the group subscription. ( Available in OPC DA V3 servers only ).
            </summary>
            <param name="keepAliveRate">The maximum amount of time (in milliseconds) between subscription 
            callbacks. A value of zero indicates the server will not send any empty keep-alive callbacks.</param>
            <returns>S_OK or E_FAIL</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.SetKeepAlive(System.Int32,System.Int32@)">
            <summary>
            Sets the keep-alive time for the group subscription.<br/>
            Only OPC DA V3 servers support the keep alive feature. The OPCDA.NET Professional Edition emulates the 
            keep alive feature for servers that don't implement the OPC DA V3 IOPCGroupStateMgt2 interface. 
            Some servers may implement the interface but not the method. 
            In this case the OpcServer.DeclareV2 property has to be set to force the emulation to be used.
            The emulation has a client side thread that makes periodically GetStatus server calls and executes keepalive 
            DataChange callbacks accourding the OPC DA V3 keep alive specification.<br/>
            Clients can set the keep-alive time for a subscription to cause the server to provide client callbacks on
            the subscription when there are no new events to report. Clients can then be assured of the health of the
            server and subscription without resorting to pinging the server with calls to GetStatus().
            Using this facility, a client can expect a callback (data or keep-alive) within the specified keep-alive
            time.<br/>
            Servers shall reset their keep-alive timers when real data is sent (i.e. it is not acceptable to constantly
            send the keep-alive callback at a fixed period equal to the keep-alive time irrespective of data callbacks).
            </summary>
            <param name="keepAliveRate">The maximum amount of time (in milliseconds) between subscription 
            callbacks. A value of zero indicates the server will not send any empty keep-alive callbacks.</param>
            <param name="revKeepAliveRate">The KeepAliveTime the server is actually providing, which may differ from keepAliveRate.</param>
            <returns>S_OK or E_FAIL</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.SetItemDeadband(System.Int32[],System.Single[],System.Int32[]@)">
            <summary>
            Overrides the deadband specified for the group for each item. ( Available in OPC DA V3 servers only ).
            </summary>
            <param name="handles">Array of Server items handles.</param>
            <param name="percentDeadband">Array of deadband values. Each value must be from 0.0 to 100.0, 
            which is the percentage of the change allowed per update period.</param>
            <param name="errors"></param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.GetItemDeadband(System.Int32[],System.Single[]@,System.Int32[]@)">
            <summary>
            Gets the deadband values for each of the requested items. ( Available in OPC DA V3 servers only ).
            </summary>
            <param name="handles">Array of Server items handles.</param>
            <param name="percentDeadband">Array of deadband values. Each successful value will be from 0.0 to 
            100.0, which describes the percent deadband allowed for that particular item.</param>
            <param name="errors"></param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.ClearItemDeadband(System.Int32[],System.Int32[]@)">
            <summary>
            Clears the individual item PercentDeadband, effectively reverting them back to the deadband 
            value set in the group. ( Available in OPC DA V3 servers only ).
            </summary>
            <param name="handles">Array of Server items handles. </param>
            <param name="errors">Array of HRESULT’s. Indicates the results of clearing the deadband for 
            each item.</param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.SetItemSamplingRate(System.Int32[],System.Int32[],System.Int32[]@,System.Int32[]@)">
            <summary>
            Sets the sampling rate on individual items. ( Available in OPC DA V3 servers only ).<br/>
            This overrides the update rate of the group as far as collection from the underlying device is 
            concerned. The update rate associated with individual items does not effect the callback period.
            </summary>
            <param name="handles">Array of Server items handles.</param>
            <param name="RequestedSamplingRate">Requested Sampling period for the item in milliseconds. 
            This also indicates the desired accuracy of the Cached Data.</param>
            <param name="RevisedSamplingRate">The server returns the value it will actually use for the 
            SamplingRate in milliseconds, which may differ from the RequestedSamplingRate.</param>
            <param name="errors"></param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.GetItemSamplingRate(System.Int32[],System.Int32[]@,System.Int32[]@)">
            <summary>
            Gets the sampling rate on individual items, which was previously set with GetItemSamplingRate (
             Available in OPC DA V3 servers only ).
            </summary>
            <param name="handles">Array of item handles of the items to be affected.</param>
            <param name="SamplingRate">Samplein rate for the item in milliseconds.</param>
            <param name="errors"></param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.ClearItemSamplingRate(System.Int32[],System.Int32[]@)">
            <summary>
            Clears the sampling rate on individual items, which was previously set with SetItemSamplingRate. 
            ( Available in OPC DA V3 servers only ).<br/>
            The item will revert back to the update rate of the group. 
            </summary>
            <param name="handles">Array of Server items handles.</param>
            <param name="errors"></param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.SetItemBufferEnable(System.Int32[],System.Boolean[],System.Int32[]@)">
            <summary>
            Requests that the server turns on or off, depending on the value of the enableState parameter, 
            the buffering of data for the identified items, which are collected for items that have an update 
            rate faster than the group update rate. ( Available in OPC DA V3 servers only ).
            </summary>
            <param name="handles">Array of Server items handles.</param>
            <param name="enableState">An array of booleans to set the state of the buffering mechanism within 
            the server. True is requesting that the server buffers data for the corresponding item, while false 
            indicates the server should not buffer the data.</param>
            <param name="errors"></param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.GetItemBufferEnable(System.Int32[],System.Boolean[]@,System.Int32[]@)">
            <summary>
            Queries the current state of the servers buffering for requested items. ( Available in OPC DA V3 servers only ).
            </summary>
            <param name="handles">Array of Server items handles.</param>
            <param name="enableState">An array of returned booleans representing the state of the buffering 
            mechanism within the server for each requested item. True is requesting that the server buffers data 
            for the corresponding item, while false indicates the server should not buffer the data.</param>
            <param name="errors"></param>
            <returns>HRESULT success/error code</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.QualityToString(System.Int16)">
            <summary>
            Helper method to build a string for an OPC Quality code
            </summary>
            <param name="Quality">OPC Quality code</param>
            <returns>Item quality description string</returns>
        </member>
        <member name="M:OPCDA.NET.OpcGroup.AdviseIOPCDataCallback">
            <summary>
            Activates the callback handling.<br/>
            The server makes callbacks on data change, read complete, write complet and cancel complete.
            The user needs to install callback event handlers to actually getting notified.
            </summary>
        </member>
        <member name="P:OPCDA.NET.OpcGroup.Name">
            <summary>
            OpcGroup name property assignement.<br/>
            A get is from the OpcGroup property. Use OpcGrp.GetStat() to refresh the
            properties if this may be necessary. On set the OPC server is updated.
            </summary>
        </member>
        <member name="P:OPCDA.NET.OpcGroup.Active">
            <summary>
            OpcGroup Active state property assignement.<br/>
            A get is from the OpcGroup property. Use OpcGrp.GetStat() to refresh the
            properties if this may be necessary. On set the OPC server is updated.<br/>
            On server call errors an exception is thrown if the property OpcServer.ErrorsAsExecptions is set.
            </summary>
        </member>
        <member name="P:OPCDA.NET.OpcGroup.Public">
            <summary>
            OpcGroup name property assignement.<br/>
            A get is from the OpcGroup property. Use OpcGrp.GetStat() to refresh the
            properties if this may be necessary. Only get is allowes with this property.
            </summary>
        </member>
        <member name="P:OPCDA.NET.OpcGroup.UpdateRate">
            <summary>
            OpcGroup UpdateRate property assignement.<br/>
            A get is from the OpcGroup property. Use OpcGrp.GetStat() to refresh the
            properties if this may be necessary. On set the OPC server is updated.<br/>
            On server call errors an exception is thrown if the property OpcServer.ErrorsAsExecptions is set.
            </summary>
        </member>
        <member name="P:OPCDA.NET.OpcGroup.TimeBias">
            <summary>
            OpcGroup TimeBias property assignement.<br/>
            A get is from the OpcGroup property. Use OpcGrp.GetStat() to refresh the
            properties if this may be necessary. On set the OPC server is updated.<br/>
            On server call errors an exception is thrown if the property OpcServer.ErrorsAsExecptions is set.
            </summary>
        </member>
        <member name="P:OPCDA.NET.OpcGroup.PercentDeadband">
            <summary>
            OpcGroup PercentDeadband property assignement.<br/>
            A get is from the OpcGroup property. Use OpcGrp.GetStat() to refresh the
            properties if this may be necessary. On set the OPC server is updated.<br/>
            On server call errors an exception is thrown if the property OpcServer.ErrorsAsExecptions is set.
            </summary>
        </member>
        <member name="P:OPCDA.NET.OpcGroup.LocaleID">
            <summary>
            OpcGroup LocaleID property assignement.<br/>
            A get is from the OpcGroup property. Use OpcGrp.GetStat() to refresh the
            properties if this may be necessary. On set the OPC server is updated.<br/>
            On server call errors an exception is thrown if the property OpcServer.ErrorsAsExecptions is set.
            </summary>
        </member>
        <member name="P:OPCDA.NET.OpcGroup.HandleClient">
            <summary>
            OpcGroup Client Handle property assignement.<br/>
            A get is from the OpcGroup property. Use OpcGrp.GetStat() to refresh the
            properties if this may be necessary. On set the OPC server is updated.
            </summary>
        </member>
        <member name="P:OPCDA.NET.OpcGroup.HandleServer">
            <summary>
            OpcGroup Server Handle property assignement.<br/>
            A get is from the OpcGroup property. Use OpcGrp.GetStat() to refresh the
            properties if this may be necessary. Only get access is allowed.
            </summary>
        </member>
        <member name="E:OPCDA.NET.OpcGroup.DataChanged">
            <summary>
            Is called from the server on data change events. 
            AdviseIOPCDataCallback needs to be called to activate the callback handling.
            The client can install handlers to handle notifications of data changes and Refreshes. 
            </summary>
        </member>
        <member name="E:OPCDA.NET.OpcGroup.ReadCompleted">
            <summary>
            Is called from the server on read completed events. 
            AdviseIOPCDataCallback needs to be called to activate the callback handling.
            The client can install handlers to handle notifications of completion of read requests. 
            </summary>
        </member>
        <member name="E:OPCDA.NET.OpcGroup.WriteCompleted">
            <summary>
            Is called from the server on write completed events. 
            AdviseIOPCDataCallback needs to be called to activate the callback handling.
            The client can install handlers to handle notifications of completion of write requests. 
            </summary>
        </member>
        <member name="E:OPCDA.NET.OpcGroup.CancelCompleted">
            <summary>
            Is called from the server on cancel completed events. 
            AdviseIOPCDataCallback needs to be called to activate the callback handling.
            The client can install handlers to handle notifications of completion of cancel requests. 
            </summary>
        </member>
        <member name="T:OPCDA.NET.OPCGroupState">
            <summary>
            OPCGroupState class. Holds all data of a group including the data returned at AddGroup.
            </summary>
        </member>
        <member name="T:OPCDA.NET.BrowseV3Emulate">
            <summary>
            Summary description for BrowseV2Emulate.
            </summary>
        </member>
    </members>
</doc>
